Search.setIndex({"alltitles": {"Add checks for any unusual data structures": [[12, "add-checks-for-any-unusual-data-structures"]], "Attacks": [[1, "attacks"]], "Attribute Attack": [[0, "module-sacroml.attacks.attribute_attack"]], "Base Class": [[16, "module-sacroml.safemodel.safemodel"]], "Contents:": [[9, null]], "Copy The Template": [[12, "copy-the-template"]], "Define the Safer Class": [[12, "define-the-safer-class"]], "Examples": [[11, "examples"]], "Extending SafeModel": [[12, "extending-safemodel"]], "Funding Statement": [[9, "funding-statement"]], "General Structure": [[4, "general-structure"]], "Include any optional helper functions": [[12, "include-any-optional-helper-functions"]], "Indices and tables": [[9, "indices-and-tables"]], "Introduction": [[10, "introduction"]], "JSON Output for Attacks": [[4, "json-output-for-attacks"]], "LiRA Attack": [[2, "module-sacroml.attacks.likelihood_attack"], [4, "lira-attack"]], "Metrics": [[3, "module-sacroml.metrics"]], "Modular Design": [[12, "modular-design"]], "Override the fit() function": [[12, "override-the-fit-function"]], "Report": [[5, "module-sacroml.attacks.report"]], "SafeDecisionTree": [[14, "safedecisiontree"]], "SafeDecisionTree Full Length Tutorial": [[11, "safedecisiontree-full-length-tutorial"]], "SafeKeras Quick Start Notebook": [[11, "safekeras-quick-start-notebook"]], "SafeKerasModel": [[15, "safekerasmodel"]], "SafeRandomForest": [[17, "saferandomforest"]], "SafeRandomForest Quick Start Notebook": [[11, "saferandomforest-quick-start-notebook"]], "SafeSVC": [[18, "safesvc"]], "SafeSVC Quick Start Notebook": [[11, "safesvc-quick-start-notebook"]], "Safemodel": [[13, "safemodel"]], "Structural Attack": [[6, "module-sacroml.attacks.structural_attack"]], "Target": [[7, "module-sacroml.attacks.target"]], "Update Sphinx documentation": [[12, "update-sphinx-documentation"]], "Update rules.json file": [[12, "update-rules-json-file"]], "Update the __init__ method with paramnames, ignore_items, and examine_separately items": [[12, "update-the-init-method-with-paramnames-ignore-items-and-examine-separately-items"]], "Welcome to the SACRO-ML documentation!": [[9, "welcome-to-the-sacro-ml-documentation"]], "What is safemodel?": [[10, "what-is-safemodel"]], "Worst Case Attack": [[8, "module-sacroml.attacks.worst_case_attack"]], "Worst-Case Attack": [[4, "worst-case-attack"]], "Write pytests to confirm core functionality": [[12, "write-pytests-to-confirm-core-functionality"]], "})": [[15, "id83"]]}, "docnames": ["attacks/attribute", "attacks/index", "attacks/likelihood", "attacks/metrics", "attacks/output_format", "attacks/report", "attacks/structural", "attacks/target", "attacks/worst_case", "index", "introduction", "safemodel/examples", "safemodel/extending", "safemodel/index", "safemodel/safedecisiontree", "safemodel/safekeras", "safemodel/safemodel", "safemodel/saferandomforest", "safemodel/safesvc"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["attacks/attribute.rst", "attacks/index.rst", "attacks/likelihood.rst", "attacks/metrics.rst", "attacks/output_format.rst", "attacks/report.rst", "attacks/structural.rst", "attacks/target.rst", "attacks/worst_case.rst", "index.rst", "introduction.rst", "safemodel/examples.rst", "safemodel/extending.rst", "safemodel/index.rst", "safemodel/safedecisiontree.rst", "safemodel/safekeras.rst", "safemodel/safemodel.rst", "safemodel/saferandomforest.rst", "safemodel/safesvc.rst"], "indexentries": {"__annotations__ (sacroml.safemodel.safemodel.safemodel attribute)": [[16, "sacroml.safemodel.safemodel.SafeModel.__annotations__", false]], "__apply_constraints() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.__apply_constraints", false]], "__check_model_param() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.__check_model_param", false]], "__check_model_param_and() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.__check_model_param_and", false]], "__check_model_param_or() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.__check_model_param_or", false]], "__dict__ (sacroml.safemodel.safemodel.safemodel attribute)": [[16, "sacroml.safemodel.safemodel.SafeModel.__dict__", false]], "__get_constraints() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.__get_constraints", false]], "__init__() (sacroml.attacks.attribute_attack.attributeattack method)": [[0, "sacroml.attacks.attribute_attack.AttributeAttack.__init__", false]], "__init__() (sacroml.attacks.likelihood_attack.liraattack method)": [[2, "sacroml.attacks.likelihood_attack.LIRAAttack.__init__", false]], "__init__() (sacroml.attacks.report.customjsonencoder method)": [[5, "sacroml.attacks.report.CustomJSONEncoder.__init__", false]], "__init__() (sacroml.attacks.structural_attack.structuralattack method)": [[6, "sacroml.attacks.structural_attack.StructuralAttack.__init__", false]], "__init__() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.__init__", false]], "__init__() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.__init__", false]], "__init__() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.__init__", false]], "__init__() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.__init__", false]], "__init__() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.__init__", false]], "__init__() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.__init__", false]], "__init__() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.__init__", false]], "__module__ (sacroml.safemodel.safemodel.safemodel attribute)": [[16, "sacroml.safemodel.safemodel.SafeModel.__module__", false]], "__str__() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.__str__", false]], "activity_regularizer (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.activity_regularizer", false]], "add_feature() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.add_feature", false]], "add_loss() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.add_loss", false]], "add_metric() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.add_metric", false]], "add_processed_data() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.add_processed_data", false]], "add_raw_data() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.add_raw_data", false]], "add_safemodel_results() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.add_safemodel_results", false]], "add_update() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.add_update", false]], "add_variable() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.add_variable", false]], "add_weight() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.add_weight", false]], "additional_checks() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.additional_checks", false]], "additional_checks() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.additional_checks", false]], "additional_checks() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.additional_checks", false]], "additional_checks() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.additional_checks", false]], "additional_checks() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.additional_checks", false]], "apply() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.apply", false]], "apply() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.apply", false]], "attack() (sacroml.attacks.attribute_attack.attributeattack method)": [[0, "sacroml.attacks.attribute_attack.AttributeAttack.attack", false]], "attack() (sacroml.attacks.likelihood_attack.liraattack method)": [[2, "sacroml.attacks.likelihood_attack.LIRAAttack.attack", false]], "attack() (sacroml.attacks.structural_attack.structuralattack method)": [[6, "sacroml.attacks.structural_attack.StructuralAttack.attack", false]], "attack() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.attack", false]], "attack_from_preds() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.attack_from_preds", false]], "attributeattack (class in sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.AttributeAttack", false]], "auc_p_val() (in module sacroml.metrics)": [[3, "sacroml.metrics.auc_p_val", false]], "build() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.build", false]], "build_from_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.build_from_config", false]], "call() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.call", false]], "check_checkpoint_equality() (in module sacroml.safemodel.classifiers.safekeras)": [[15, "sacroml.safemodel.classifiers.safekeras.check_checkpoint_equality", false]], "check_dp_used() (in module sacroml.safemodel.classifiers.safekeras)": [[15, "sacroml.safemodel.classifiers.safekeras.check_dp_used", false]], "check_epsilon() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.check_epsilon", false]], "check_equal() (in module sacroml.safemodel.safemodel)": [[16, "sacroml.safemodel.safemodel.check_equal", false]], "check_max() (in module sacroml.safemodel.safemodel)": [[16, "sacroml.safemodel.safemodel.check_max", false]], "check_min() (in module sacroml.safemodel.safemodel)": [[16, "sacroml.safemodel.safemodel.check_min", false]], "check_optimizer_allowed() (in module sacroml.safemodel.classifiers.safekeras)": [[15, "sacroml.safemodel.classifiers.safekeras.check_optimizer_allowed", false]], "check_optimizer_is_dp() (in module sacroml.safemodel.classifiers.safekeras)": [[15, "sacroml.safemodel.classifiers.safekeras.check_optimizer_is_dp", false]], "check_type() (in module sacroml.safemodel.safemodel)": [[16, "sacroml.safemodel.safemodel.check_type", false]], "compile() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compile", false]], "compile_from_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compile_from_config", false]], "compute_dtype (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_dtype", false]], "compute_loss() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_loss", false]], "compute_mask() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_mask", false]], "compute_metrics() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_metrics", false]], "compute_output_shape() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_output_shape", false]], "compute_output_signature() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_output_signature", false]], "cost_complexity_pruning_path() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.cost_complexity_pruning_path", false]], "count_params() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.count_params", false]], "create_lr_report() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.create_lr_report", false]], "create_mia_report() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.create_mia_report", false]], "customjsonencoder (class in sacroml.attacks.report)": [[5, "sacroml.attacks.report.CustomJSONEncoder", false]], "decision_path() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.decision_path", false]], "decision_path() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.decision_path", false]], "decision_tree_internal_trees_are_equal() (in module sacroml.safemodel.classifiers.safedecisiontreeclassifier)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.decision_tree_internal_trees_are_equal", false]], "decision_trees_are_equal() (in module sacroml.safemodel.classifiers.safedecisiontreeclassifier)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.decision_trees_are_equal", false]], "default() (sacroml.attacks.report.customjsonencoder method)": [[5, "sacroml.attacks.report.CustomJSONEncoder.default", false]], "distribute_reduction_method (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.distribute_reduction_method", false]], "distribute_strategy (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.distribute_strategy", false]], "dp_epsilon_met() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.dp_epsilon_met", false]], "dt_get_equivalence_classes() (sacroml.attacks.structural_attack.structuralattack method)": [[6, "sacroml.attacks.structural_attack.StructuralAttack.dt_get_equivalence_classes", false]], "dtype (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.dtype", false]], "dtype_policy (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.dtype_policy", false]], "dynamic (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.dynamic", false]], "enable_tune_steps_per_execution (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.enable_tune_steps_per_execution", false]], "encode() (sacroml.attacks.report.customjsonencoder method)": [[5, "sacroml.attacks.report.CustomJSONEncoder.encode", false]], "estimators_samples_ (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier property)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.estimators_samples_", false]], "evaluate() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.evaluate", false]], "evaluate_generator() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.evaluate_generator", false]], "examine_seperate_items() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.examine_seperate_items", false]], "examine_seperate_items() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.examine_seperate_items", false]], "examine_seperate_items() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.examine_seperate_items", false]], "examine_seperate_items() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.examine_seperate_items", false]], "examine_seperate_items() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.examine_seperate_items", false]], "examine_seperately_items (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.examine_seperately_items", false]], "examine_seperately_items (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.examine_seperately_items", false]], "export() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.export", false]], "feature_importances_ (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier property)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier property)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.feature_importances_", false]], "filename (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.filename", false]], "filename (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.filename", false]], "finalize_state() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.finalize_state", false]], "fit() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.fit", false]], "fit() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.fit", false]], "fit() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.fit", false]], "fit() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.fit", false]], "fit_generator() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.fit_generator", false]], "from_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel class method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.from_config", false]], "generate_arrays() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.generate_arrays", false]], "get_array_csv() (in module sacroml.attacks.target)": [[7, "sacroml.attacks.target.get_array_csv", false]], "get_array_pkl() (in module sacroml.attacks.target)": [[7, "sacroml.attacks.target.get_array_pkl", false]], "get_build_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_build_config", false]], "get_compile_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_compile_config", false]], "get_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_config", false]], "get_current_and_saved_models() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.get_current_and_saved_models", false]], "get_current_and_saved_models() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_current_and_saved_models", false]], "get_current_and_saved_models() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.get_current_and_saved_models", false]], "get_current_and_saved_models() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.get_current_and_saved_models", false]], "get_current_and_saved_models() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.get_current_and_saved_models", false]], "get_depth() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.get_depth", false]], "get_equivalence_classes() (sacroml.attacks.structural_attack.structuralattack method)": [[6, "sacroml.attacks.structural_attack.StructuralAttack.get_equivalence_classes", false]], "get_input_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_input_at", false]], "get_input_mask_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_input_mask_at", false]], "get_input_shape_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_input_shape_at", false]], "get_k_anonymity() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.get_k_anonymity", false]], "get_layer() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_layer", false]], "get_metadata_routing() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.get_metadata_routing", false]], "get_metrics() (in module sacroml.metrics)": [[3, "sacroml.metrics.get_metrics", false]], "get_metrics_result() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_metrics_result", false]], "get_model_param_count() (in module sacroml.attacks.structural_attack)": [[6, "sacroml.attacks.structural_attack.get_model_param_count", false]], "get_n_leaves() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.get_n_leaves", false]], "get_output_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_output_at", false]], "get_output_mask_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_output_mask_at", false]], "get_output_shape_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_output_shape_at", false]], "get_params() (sacroml.attacks.attribute_attack.attributeattack method)": [[0, "sacroml.attacks.attribute_attack.AttributeAttack.get_params", false]], "get_params() (sacroml.attacks.likelihood_attack.liraattack method)": [[2, "sacroml.attacks.likelihood_attack.LIRAAttack.get_params", false]], "get_params() (sacroml.attacks.structural_attack.structuralattack method)": [[6, "sacroml.attacks.structural_attack.StructuralAttack.get_params", false]], "get_params() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.get_params", false]], "get_params() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.get_params", false]], "get_params() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_params", false]], "get_params() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.get_params", false]], "get_params() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.get_params", false]], "get_params() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.get_params", false]], "get_tree_k_anonymity() (in module sacroml.safemodel.classifiers.safedecisiontreeclassifier)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.get_tree_k_anonymity", false]], "get_tree_parameter_count() (in module sacroml.attacks.structural_attack)": [[6, "sacroml.attacks.structural_attack.get_tree_parameter_count", false]], "get_unnecessary_risk() (in module sacroml.attacks.structural_attack)": [[6, "sacroml.attacks.structural_attack.get_unnecessary_risk", false]], "get_weight_paths() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_weight_paths", false]], "get_weights() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_weights", false]], "has_data() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.has_data", false]], "has_probas() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.has_probas", false]], "has_raw_data() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.has_raw_data", false]], "ignore_items (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.ignore_items", false]], "ignore_items (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.ignore_items", false]], "inbound_nodes (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.inbound_nodes", false]], "input (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.input", false]], "input_mask (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.input_mask", false]], "input_shape (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.input_shape", false]], "input_spec (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.input_spec", false]], "item_separator (sacroml.attacks.report.customjsonencoder attribute)": [[5, "sacroml.attacks.report.CustomJSONEncoder.item_separator", false]], "iterencode() (sacroml.attacks.report.customjsonencoder method)": [[5, "sacroml.attacks.report.CustomJSONEncoder.iterencode", false]], "jit_compile (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.jit_compile", false]], "k_hat_svm() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.k_hat_svm", false]], "key_separator (sacroml.attacks.report.customjsonencoder attribute)": [[5, "sacroml.attacks.report.CustomJSONEncoder.key_separator", false]], "layers (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.layers", false]], "line() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.line", false]], "liraattack (class in sacroml.attacks.likelihood_attack)": [[2, "sacroml.attacks.likelihood_attack.LIRAAttack", false]], "load() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.load", false]], "load_array() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.load_array", false]], "load_model() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.load_model", false]], "load_own_variables() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.load_own_variables", false]], "load_safe_keras_model() (in module sacroml.safemodel.classifiers.safekeras)": [[15, "sacroml.safemodel.classifiers.safekeras.load_safe_keras_model", false]], "load_weights() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.load_weights", false]], "losses (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.losses", false]], "make_predict_function() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.make_predict_function", false]], "make_test_function() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.make_test_function", false]], "make_train_function() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.make_train_function", false]], "metrics (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.metrics", false]], "metrics_names (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.metrics_names", false]], "min_max_disc() (in module sacroml.metrics)": [[3, "sacroml.metrics.min_max_disc", false]], "model_load_file (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.model_load_file", false]], "model_load_file (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.model_load_file", false]], "model_save_file (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.model_save_file", false]], "model_save_file (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.model_save_file", false]], "model_type (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.model_type", false]], "model_type (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.model_type", false]], "module": [[0, "module-sacroml.attacks.attribute_attack", false], [2, "module-sacroml.attacks.likelihood_attack", false], [3, "module-sacroml.metrics", false], [5, "module-sacroml.attacks.report", false], [6, "module-sacroml.attacks.structural_attack", false], [7, "module-sacroml.attacks.target", false], [8, "module-sacroml.attacks.worst_case_attack", false], [14, "module-sacroml.safemodel.classifiers.safedecisiontreeclassifier", false], [15, "module-sacroml.safemodel.classifiers.safekeras", false], [16, "module-sacroml.safemodel.safemodel", false], [17, "module-sacroml.safemodel.classifiers.saferandomforestclassifier", false], [18, "module-sacroml.safemodel.classifiers.safesvc", false]], "name (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.name", false]], "name_scope (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.name_scope", false]], "non_trainable_variables (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.non_trainable_variables", false]], "non_trainable_weights (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.non_trainable_weights", false]], "outbound_nodes (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.outbound_nodes", false]], "output (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.output", false]], "output_mask (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.output_mask", false]], "output_shape (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.output_shape", false]], "phi_hat() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.phi_hat", false]], "phi_hat_multi() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.phi_hat_multi", false]], "plot_categorical_fraction() (in module sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.plot_categorical_fraction", false]], "plot_categorical_risk() (in module sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.plot_categorical_risk", false]], "plot_quantitative_risk() (in module sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.plot_quantitative_risk", false]], "posthoc_check() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.posthoc_check", false]], "posthoc_check() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.posthoc_check", false]], "posthoc_check() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.posthoc_check", false]], "posthoc_check() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.posthoc_check", false]], "posthoc_check() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.posthoc_check", false]], "predict() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.predict", false]], "predict() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.predict", false]], "predict() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.predict", false]], "predict() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.predict", false]], "predict_generator() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.predict_generator", false]], "predict_log_proba() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.predict_log_proba", false]], "predict_on_batch() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.predict_on_batch", false]], "predict_proba() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.predict_proba", false]], "predict_proba() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.predict_proba", false]], "predict_proba() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.predict_proba", false]], "predict_step() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.predict_step", false]], "preliminary_check() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.preliminary_check", false]], "preliminary_check() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.preliminary_check", false]], "preliminary_check() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.preliminary_check", false]], "preliminary_check() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.preliminary_check", false]], "preliminary_check() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.preliminary_check", false]], "report_categorical() (in module sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.report_categorical", false]], "report_quantitative() (in module sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.report_quantitative", false]], "request_release() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.request_release", false]], "request_release() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.request_release", false]], "request_release() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.request_release", false]], "request_release() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.request_release", false]], "request_release() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.request_release", false]], "researcher (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.researcher", false]], "researcher (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.researcher", false]], "reset_metrics() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.reset_metrics", false]], "reset_states() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.reset_states", false]], "run_attack() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.run_attack", false]], "run_attack() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.run_attack", false]], "run_attack() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.run_attack", false]], "run_attack() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.run_attack", false]], "run_attack() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.run_attack", false]], "run_attack_reps() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.run_attack_reps", false]], "run_eagerly (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.run_eagerly", false]], "sacroml.attacks.attribute_attack": [[0, "module-sacroml.attacks.attribute_attack", false]], "sacroml.attacks.likelihood_attack": [[2, "module-sacroml.attacks.likelihood_attack", false]], "sacroml.attacks.report": [[5, "module-sacroml.attacks.report", false]], "sacroml.attacks.structural_attack": [[6, "module-sacroml.attacks.structural_attack", false]], "sacroml.attacks.target": [[7, "module-sacroml.attacks.target", false]], "sacroml.attacks.worst_case_attack": [[8, "module-sacroml.attacks.worst_case_attack", false]], "sacroml.metrics": [[3, "module-sacroml.metrics", false]], "sacroml.safemodel.classifiers.safedecisiontreeclassifier": [[14, "module-sacroml.safemodel.classifiers.safedecisiontreeclassifier", false]], "sacroml.safemodel.classifiers.safekeras": [[15, "module-sacroml.safemodel.classifiers.safekeras", false]], "sacroml.safemodel.classifiers.saferandomforestclassifier": [[17, "module-sacroml.safemodel.classifiers.saferandomforestclassifier", false]], "sacroml.safemodel.classifiers.safesvc": [[18, "module-sacroml.safemodel.classifiers.safesvc", false]], "sacroml.safemodel.safemodel": [[16, "module-sacroml.safemodel.safemodel", false]], "safedecisiontreeclassifier (class in sacroml.safemodel.classifiers.safedecisiontreeclassifier)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier", false]], "safekerasmodel (class in sacroml.safemodel.classifiers.safekeras)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel", false]], "safemodel (class in sacroml.safemodel.safemodel)": [[16, "sacroml.safemodel.safemodel.SafeModel", false]], "saferandomforestclassifier (class in sacroml.safemodel.classifiers.saferandomforestclassifier)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier", false]], "safesvc (class in sacroml.safemodel.classifiers.safesvc)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC", false]], "same_configs() (in module sacroml.safemodel.classifiers.safekeras)": [[15, "sacroml.safemodel.classifiers.safekeras.same_configs", false]], "same_weights() (in module sacroml.safemodel.classifiers.safekeras)": [[15, "sacroml.safemodel.classifiers.safekeras.same_weights", false]], "save() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.save", false]], "save() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.save", false]], "save() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.save", false]], "save() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.save", false]], "save() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.save", false]], "save() (sacroml.safemodel.safemodel.safemodel method)": [[16, "sacroml.safemodel.safemodel.SafeModel.save", false]], "save_own_variables() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.save_own_variables", false]], "save_spec() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.save_spec", false]], "save_weights() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.save_weights", false]], "score() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.score", false]], "score() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.score", false]], "set_fit_request() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.set_fit_request", false]], "set_params() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.set_params", false]], "set_params() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.set_params", false]], "set_params() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.set_params", false]], "set_score_request() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[14, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.set_score_request", false]], "set_score_request() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.set_score_request", false]], "set_weights() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.set_weights", false]], "state_updates (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.state_updates", false]], "stateful (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.stateful", false]], "structuralattack (class in sacroml.attacks.structural_attack)": [[6, "sacroml.attacks.structural_attack.StructuralAttack", false]], "submodules (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.submodules", false]], "subtitle() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.subtitle", false]], "summary() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.summary", false]], "supports_masking (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.supports_masking", false]], "target (class in sacroml.attacks.target)": [[7, "sacroml.attacks.target.Target", false]], "test_on_batch() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.test_on_batch", false]], "test_step() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.test_step", false]], "timestamp (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[17, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.timestamp", false]], "timestamp (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[18, "sacroml.safemodel.classifiers.safesvc.SafeSVC.timestamp", false]], "title() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.title", false]], "to_json() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.to_json", false]], "to_yaml() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.to_yaml", false]], "train_on_batch() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.train_on_batch", false]], "train_step() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.train_step", false]], "trainable (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.trainable", false]], "trainable_variables (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.trainable_variables", false]], "trainable_weights (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.trainable_weights", false]], "updates (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.updates", false]], "variable_dtype (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.variable_dtype", false]], "variables (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.variables", false]], "weights (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.weights", false]], "with_name_scope() (sacroml.safemodel.classifiers.safekeras.safekerasmodel class method)": [[15, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.with_name_scope", false]], "worstcaseattack (class in sacroml.attacks.worst_case_attack)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack", false]], "write_json() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.write_json", false]], "write_pdf() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.write_pdf", false]]}, "objects": {"sacroml": [[3, 0, 0, "-", "metrics"]], "sacroml.attacks": [[0, 0, 0, "-", "attribute_attack"], [2, 0, 0, "-", "likelihood_attack"], [5, 0, 0, "-", "report"], [6, 0, 0, "-", "structural_attack"], [7, 0, 0, "-", "target"], [8, 0, 0, "-", "worst_case_attack"]], "sacroml.attacks.attribute_attack": [[0, 1, 1, "", "AttributeAttack"], [0, 3, 1, "", "plot_categorical_fraction"], [0, 3, 1, "", "plot_categorical_risk"], [0, 3, 1, "", "plot_quantitative_risk"], [0, 3, 1, "", "report_categorical"], [0, 3, 1, "", "report_quantitative"]], "sacroml.attacks.attribute_attack.AttributeAttack": [[0, 2, 1, "", "__init__"], [0, 2, 1, "", "attack"], [0, 2, 1, "", "get_params"]], "sacroml.attacks.likelihood_attack": [[2, 1, 1, "", "LIRAAttack"]], "sacroml.attacks.likelihood_attack.LIRAAttack": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "attack"], [2, 2, 1, "", "get_params"]], "sacroml.attacks.report": [[5, 1, 1, "", "CustomJSONEncoder"], [5, 3, 1, "", "create_lr_report"], [5, 3, 1, "", "create_mia_report"], [5, 3, 1, "", "line"], [5, 3, 1, "", "subtitle"], [5, 3, 1, "", "title"], [5, 3, 1, "", "write_json"], [5, 3, 1, "", "write_pdf"]], "sacroml.attacks.report.CustomJSONEncoder": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "default"], [5, 2, 1, "", "encode"], [5, 4, 1, "", "item_separator"], [5, 2, 1, "", "iterencode"], [5, 4, 1, "", "key_separator"]], "sacroml.attacks.structural_attack": [[6, 1, 1, "", "StructuralAttack"], [6, 3, 1, "", "get_model_param_count"], [6, 3, 1, "", "get_tree_parameter_count"], [6, 3, 1, "", "get_unnecessary_risk"]], "sacroml.attacks.structural_attack.StructuralAttack": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "attack"], [6, 2, 1, "", "dt_get_equivalence_classes"], [6, 2, 1, "", "get_equivalence_classes"], [6, 2, 1, "", "get_params"]], "sacroml.attacks.target": [[7, 1, 1, "", "Target"], [7, 3, 1, "", "get_array_csv"], [7, 3, 1, "", "get_array_pkl"]], "sacroml.attacks.target.Target": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "add_feature"], [7, 2, 1, "", "add_processed_data"], [7, 2, 1, "", "add_raw_data"], [7, 2, 1, "", "add_safemodel_results"], [7, 2, 1, "", "has_data"], [7, 2, 1, "", "has_probas"], [7, 2, 1, "", "has_raw_data"], [7, 2, 1, "", "load"], [7, 2, 1, "", "load_array"], [7, 2, 1, "", "load_model"], [7, 2, 1, "", "save"]], "sacroml.attacks.worst_case_attack": [[8, 1, 1, "", "WorstCaseAttack"]], "sacroml.attacks.worst_case_attack.WorstCaseAttack": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "attack"], [8, 2, 1, "", "attack_from_preds"], [8, 2, 1, "", "generate_arrays"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "run_attack_reps"]], "sacroml.metrics": [[3, 3, 1, "", "auc_p_val"], [3, 3, 1, "", "get_metrics"], [3, 3, 1, "", "min_max_disc"]], "sacroml.safemodel": [[16, 0, 0, "-", "safemodel"]], "sacroml.safemodel.classifiers": [[14, 0, 0, "-", "safedecisiontreeclassifier"], [15, 0, 0, "-", "safekeras"], [17, 0, 0, "-", "saferandomforestclassifier"], [18, 0, 0, "-", "safesvc"]], "sacroml.safemodel.classifiers.safedecisiontreeclassifier": [[14, 1, 1, "", "SafeDecisionTreeClassifier"], [14, 3, 1, "", "decision_tree_internal_trees_are_equal"], [14, 3, 1, "", "decision_trees_are_equal"], [14, 3, 1, "", "get_tree_k_anonymity"]], "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "additional_checks"], [14, 2, 1, "", "apply"], [14, 2, 1, "", "cost_complexity_pruning_path"], [14, 2, 1, "", "decision_path"], [14, 2, 1, "", "examine_seperate_items"], [14, 5, 1, "", "feature_importances_"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "get_current_and_saved_models"], [14, 2, 1, "", "get_depth"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_n_leaves"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "posthoc_check"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "predict_log_proba"], [14, 2, 1, "", "predict_proba"], [14, 2, 1, "", "preliminary_check"], [14, 2, 1, "", "request_release"], [14, 2, 1, "", "run_attack"], [14, 2, 1, "", "save"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sacroml.safemodel.classifiers.safekeras": [[15, 1, 1, "", "SafeKerasModel"], [15, 3, 1, "", "check_checkpoint_equality"], [15, 3, 1, "", "check_dp_used"], [15, 3, 1, "", "check_optimizer_allowed"], [15, 3, 1, "", "check_optimizer_is_dp"], [15, 3, 1, "", "load_safe_keras_model"], [15, 3, 1, "", "same_configs"], [15, 3, 1, "", "same_weights"]], "sacroml.safemodel.classifiers.safekeras.SafeKerasModel": [[15, 2, 1, "", "__init__"], [15, 5, 1, "", "activity_regularizer"], [15, 2, 1, "", "add_loss"], [15, 2, 1, "", "add_metric"], [15, 2, 1, "", "add_update"], [15, 2, 1, "", "add_variable"], [15, 2, 1, "", "add_weight"], [15, 2, 1, "", "additional_checks"], [15, 2, 1, "", "build"], [15, 2, 1, "", "build_from_config"], [15, 2, 1, "", "call"], [15, 2, 1, "", "check_epsilon"], [15, 2, 1, "", "compile"], [15, 2, 1, "", "compile_from_config"], [15, 5, 1, "", "compute_dtype"], [15, 2, 1, "", "compute_loss"], [15, 2, 1, "", "compute_mask"], [15, 2, 1, "", "compute_metrics"], [15, 2, 1, "", "compute_output_shape"], [15, 2, 1, "", "compute_output_signature"], [15, 2, 1, "", "count_params"], [15, 5, 1, "", "distribute_reduction_method"], [15, 5, 1, "", "distribute_strategy"], [15, 2, 1, "", "dp_epsilon_met"], [15, 5, 1, "", "dtype"], [15, 5, 1, "", "dtype_policy"], [15, 5, 1, "", "dynamic"], [15, 5, 1, "", "enable_tune_steps_per_execution"], [15, 2, 1, "", "evaluate"], [15, 2, 1, "", "evaluate_generator"], [15, 2, 1, "", "examine_seperate_items"], [15, 2, 1, "", "export"], [15, 2, 1, "", "finalize_state"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "fit_generator"], [15, 2, 1, "", "from_config"], [15, 2, 1, "", "get_build_config"], [15, 2, 1, "", "get_compile_config"], [15, 2, 1, "", "get_config"], [15, 2, 1, "", "get_current_and_saved_models"], [15, 2, 1, "", "get_input_at"], [15, 2, 1, "", "get_input_mask_at"], [15, 2, 1, "", "get_input_shape_at"], [15, 2, 1, "", "get_layer"], [15, 2, 1, "", "get_metrics_result"], [15, 2, 1, "", "get_output_at"], [15, 2, 1, "", "get_output_mask_at"], [15, 2, 1, "", "get_output_shape_at"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "get_weight_paths"], [15, 2, 1, "", "get_weights"], [15, 5, 1, "", "inbound_nodes"], [15, 5, 1, "", "input"], [15, 5, 1, "", "input_mask"], [15, 5, 1, "", "input_shape"], [15, 5, 1, "", "input_spec"], [15, 5, 1, "", "jit_compile"], [15, 5, 1, "", "layers"], [15, 2, 1, "", "load_own_variables"], [15, 2, 1, "", "load_weights"], [15, 5, 1, "", "losses"], [15, 2, 1, "", "make_predict_function"], [15, 2, 1, "", "make_test_function"], [15, 2, 1, "", "make_train_function"], [15, 5, 1, "", "metrics"], [15, 5, 1, "", "metrics_names"], [15, 5, 1, "", "name"], [15, 5, 1, "", "name_scope"], [15, 5, 1, "", "non_trainable_variables"], [15, 5, 1, "", "non_trainable_weights"], [15, 5, 1, "", "outbound_nodes"], [15, 5, 1, "", "output"], [15, 5, 1, "", "output_mask"], [15, 5, 1, "", "output_shape"], [15, 2, 1, "", "posthoc_check"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_generator"], [15, 2, 1, "", "predict_on_batch"], [15, 2, 1, "", "predict_step"], [15, 2, 1, "", "preliminary_check"], [15, 2, 1, "", "request_release"], [15, 2, 1, "", "reset_metrics"], [15, 2, 1, "", "reset_states"], [15, 2, 1, "", "run_attack"], [15, 5, 1, "", "run_eagerly"], [15, 2, 1, "", "save"], [15, 2, 1, "", "save_own_variables"], [15, 2, 1, "", "save_spec"], [15, 2, 1, "", "save_weights"], [15, 2, 1, "", "set_weights"], [15, 5, 1, "", "state_updates"], [15, 5, 1, "", "stateful"], [15, 5, 1, "", "submodules"], [15, 2, 1, "", "summary"], [15, 5, 1, "", "supports_masking"], [15, 2, 1, "", "test_on_batch"], [15, 2, 1, "", "test_step"], [15, 2, 1, "", "to_json"], [15, 2, 1, "", "to_yaml"], [15, 2, 1, "", "train_on_batch"], [15, 2, 1, "", "train_step"], [15, 5, 1, "", "trainable"], [15, 5, 1, "", "trainable_variables"], [15, 5, 1, "", "trainable_weights"], [15, 5, 1, "", "updates"], [15, 5, 1, "", "variable_dtype"], [15, 5, 1, "", "variables"], [15, 5, 1, "", "weights"], [15, 2, 1, "", "with_name_scope"]], "sacroml.safemodel.classifiers.saferandomforestclassifier": [[17, 1, 1, "", "SafeRandomForestClassifier"]], "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "additional_checks"], [17, 2, 1, "", "apply"], [17, 2, 1, "", "decision_path"], [17, 5, 1, "", "estimators_samples_"], [17, 2, 1, "", "examine_seperate_items"], [17, 4, 1, "", "examine_seperately_items"], [17, 5, 1, "", "feature_importances_"], [17, 4, 1, "", "filename"], [17, 2, 1, "", "fit"], [17, 2, 1, "", "get_current_and_saved_models"], [17, 2, 1, "", "get_k_anonymity"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_params"], [17, 4, 1, "", "ignore_items"], [17, 4, 1, "", "model_load_file"], [17, 4, 1, "", "model_save_file"], [17, 4, 1, "", "model_type"], [17, 2, 1, "", "posthoc_check"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_log_proba"], [17, 2, 1, "", "predict_proba"], [17, 2, 1, "", "preliminary_check"], [17, 2, 1, "", "request_release"], [17, 4, 1, "", "researcher"], [17, 2, 1, "", "run_attack"], [17, 2, 1, "", "save"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_score_request"], [17, 4, 1, "", "timestamp"]], "sacroml.safemodel.classifiers.safesvc": [[18, 1, 1, "", "SafeSVC"]], "sacroml.safemodel.classifiers.safesvc.SafeSVC": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "additional_checks"], [18, 2, 1, "", "examine_seperate_items"], [18, 4, 1, "", "examine_seperately_items"], [18, 4, 1, "", "filename"], [18, 2, 1, "", "fit"], [18, 2, 1, "", "get_current_and_saved_models"], [18, 2, 1, "", "get_params"], [18, 4, 1, "", "ignore_items"], [18, 2, 1, "", "k_hat_svm"], [18, 4, 1, "", "model_load_file"], [18, 4, 1, "", "model_save_file"], [18, 4, 1, "", "model_type"], [18, 2, 1, "", "phi_hat"], [18, 2, 1, "", "phi_hat_multi"], [18, 2, 1, "", "posthoc_check"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_proba"], [18, 2, 1, "", "preliminary_check"], [18, 2, 1, "", "request_release"], [18, 4, 1, "", "researcher"], [18, 2, 1, "", "run_attack"], [18, 2, 1, "", "save"], [18, 2, 1, "", "set_params"], [18, 4, 1, "", "timestamp"]], "sacroml.safemodel.safemodel": [[16, 1, 1, "", "SafeModel"], [16, 3, 1, "", "check_equal"], [16, 3, 1, "", "check_max"], [16, 3, 1, "", "check_min"], [16, 3, 1, "", "check_type"]], "sacroml.safemodel.safemodel.SafeModel": [[16, 4, 1, "", "__annotations__"], [16, 2, 1, "", "__apply_constraints"], [16, 2, 1, "", "__check_model_param"], [16, 2, 1, "", "__check_model_param_and"], [16, 2, 1, "", "__check_model_param_or"], [16, 4, 1, "", "__dict__"], [16, 2, 1, "", "__get_constraints"], [16, 2, 1, "", "__init__"], [16, 4, 1, "", "__module__"], [16, 2, 1, "", "__str__"], [16, 2, 1, "", "additional_checks"], [16, 2, 1, "", "examine_seperate_items"], [16, 2, 1, "", "get_current_and_saved_models"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "posthoc_check"], [16, 2, 1, "", "preliminary_check"], [16, 2, 1, "", "request_release"], [16, 2, 1, "", "run_attack"], [16, 2, 1, "", "save"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property"}, "terms": {"": [6, 14, 15, 17], "0": [2, 3, 5, 6, 8, 14, 15, 17, 18], "01604": 3, "03570": 2, "05": [2, 8], "1": [3, 4, 6, 8, 9, 10, 14, 15, 16, 17, 18], "10": [5, 8, 15, 18], "100": [2, 3], "1000": 18, "106": 3, "11": 5, "12": 5, "17": 14, "1709": 3, "18": [14, 17], "1d": 15, "2": [3, 8, 15], "20": [6, 15], "2112": 2, "24": 5, "2d": 15, "3": [0, 14, 15, 17], "30": 15, "32": 15, "4": [3, 15], "5": [3, 8, 10, 16], "6": 15, "7": 15, "70": 15, "8": 15, "90": 3, "A": [4, 11, 14, 15, 16, 17, 18], "AND": 16, "As": 15, "By": 15, "For": [2, 4, 5, 8, 12, 14, 15, 17], "If": [3, 5, 14, 15, 16, 17, 18], "In": [5, 12, 14, 15, 17], "It": [5, 8, 10, 12, 14, 15, 17], "NOT": 15, "OR": 16, "On": 15, "One": 8, "That": 17, "The": [2, 4, 5, 6, 7, 9, 10, 14, 15, 16, 17, 18], "Then": [6, 12], "These": [15, 16], "To": [0, 5, 6, 15], "_": 15, "__": [14, 17], "__annotations__": 16, "__apply_constraint": 16, "__call__": 15, "__check_model_param": 16, "__check_model_param_and": 16, "__check_model_param_or": 16, "__dict__": [12, 14, 15, 16, 17, 18], "__doc__": 16, "__get_constraint": 16, "__init__": [0, 2, 5, 6, 7, 8, 14, 15, 16, 17, 18], "__module__": 16, "__str__": 16, "__weakref__": 16, "_one_shot": 5, "_safemodel__apply_constraint": 16, "_safemodel__check_model_param": 16, "_safemodel__check_model_param_and": 16, "_safemodel__check_model_param_or": 16, "_safemodel__get_constraint": 16, "_tree": 14, "a_out": 15, "ab": 15, "abl": 15, "about": [7, 15], "abov": 15, "absolut": 15, "acc": [3, 15], "accept": 15, "access": [0, 4, 6, 9, 15], "accord": 6, "account": 15, "accumul": 15, "accuraci": [3, 6, 14, 15, 17], "across": [4, 5, 8, 15, 17], "activ": 15, "activity_regular": 15, "actual": [3, 8, 15], "ad": [14, 15, 17], "adam": 15, "adapt": 15, "add": [7, 15], "add_featur": 7, "add_loss": 15, "add_metr": 15, "add_n": 15, "add_processed_data": 7, "add_raw_data": 7, "add_safemodel_result": 7, "add_upd": 15, "add_vari": 15, "add_weight": 15, "addit": [8, 15, 16], "additional_check": [14, 15, 16, 17, 18], "administr": 9, "adr": 9, "advantag": 3, "advis": 15, "affect": 15, "after": [12, 15], "afterward": 15, "again": 15, "against": 3, "aggreg": 15, "agnost": 15, "ai": [3, 9], "aim": 10, "alarm": 3, "alia": [14, 15, 17], "all": [4, 5, 7, 15, 17], "allow": [10, 14, 15, 17], "allow_nan": 5, "alpha": 14, "alreadi": [5, 15], "also": [3, 9, 14, 15, 17], "altern": [14, 17], "although": 12, "alwai": 15, "amongst": 3, "an": [0, 2, 3, 5, 6, 8, 10, 12, 14, 15, 17, 18], "analyt": 9, "andi": 10, "ani": [5, 7, 14, 15, 16], "announc": 15, "anonym": [14, 17], "anoth": 15, "api": 15, "api_doc": 15, "appear": 17, "append": 5, "appetit": 6, "appli": [4, 6, 12, 14, 15, 16, 17, 18], "applic": 15, "apply_constraint": [12, 14, 15, 16, 17, 18], "appropri": [14, 15, 16, 17, 18], "approxim": 3, "ar": [0, 2, 3, 4, 5, 6, 8, 10, 12, 14, 15, 16, 17, 18], "architectur": 15, "aren": 15, "arg": 15, "arg_spec": 15, "argument": 15, "arial": 5, "around": 15, "arr_path": 7, "arrai": [3, 5, 7, 8, 14, 15, 17], "array_equ": 12, "artifact": 15, "arxiv": [2, 3], "ascii": 5, "assert": [3, 15], "assess": [3, 6], "assign": 15, "associ": [7, 15], "assum": 15, "assumpt": 15, "attach": 15, "attack": [3, 5, 7, 9, 14, 15, 16, 17, 18], "attack_experiment_logg": [4, 5], "attack_from_pr": 8, "attack_instance_logg": [4, 5], "attack_model": 8, "attack_model_param": 8, "attack_nam": [4, 14, 15, 16, 17, 18], "attack_output": 5, "attack_param": 4, "attempt": [5, 15], "attent": 15, "attribut": [1, 9, 14, 15, 16, 17, 18], "attribute_attack": 0, "attributeattack": 0, "attributeerror": 15, "auc": [3, 4, 6], "auc_p": 3, "auc_p_val": 3, "auc_p_valu": [2, 8], "auc_sig": 4, "auc_std": 3, "auto": 15, "automat": [5, 9, 12, 15], "avail": [5, 14, 15, 17, 18], "averag": [3, 15], "b": [5, 8, 15], "b_out": 15, "back": [14, 15, 16, 17, 18], "backpropag": 15, "backward": 15, "bag": 17, "bar": [0, 5, 15], "base": [5, 6, 7, 8, 9, 12, 13, 14, 15, 17], "base_estim": 12, "base_estimator_": 12, "baseestim": [6, 7], "baselin": [4, 8], "baseline_global_metr": 4, "basemodel_paramnam": 12, "basi": 5, "basic": [12, 15], "batch": 15, "batch_siz": 15, "batchnorm": 15, "baz": 5, "becaus": 15, "becom": 15, "been": [4, 9, 14, 15, 16, 17, 18], "befor": 15, "behav": 15, "behavior": [5, 15], "behaviour": 3, "being": [12, 15], "below": [6, 15], "benefit": 11, "best": [6, 15], "beta": 8, "better": 6, "between": [3, 14, 15], "bfloat16": 15, "bia": 15, "bias": 15, "bigobject": 5, "binari": 3, "binomi": 3, "block": 5, "bool": [0, 2, 3, 6, 7, 8, 12, 14, 15, 16, 17, 18], "boolean": [14, 15, 16, 17, 18], "bootstrap": 12, "border": 5, "both": [7, 14, 15, 16, 17, 18], "bottom": 15, "box": 6, "breadth": 15, "brought": [14, 17], "build": 15, "build_from_config": 15, "built": 15, "bunch": 14, "by_nam": 15, "bypass": 14, "c": [15, 18], "cach": 15, "caching_devic": 15, "calcul": [3, 15, 17], "call": [5, 10, 12, 14, 15, 16, 17, 18], "callabl": 15, "callback": 15, "callbacklist": 15, "caller": 15, "can": [1, 5, 8, 12, 14, 15, 17], "candid": 15, "cannot": [3, 15, 16], "capabl": 15, "captur": 15, "cardin": [14, 17], "care": 12, "carlini": 2, "carri": 14, "case": [1, 3, 5, 9, 14, 15, 16, 17, 18], "cast": 15, "categor": 0, "categorical_crossentropi": 15, "caus": [5, 15], "ccp_alpha": [12, 14], "ccp_path": 14, "cd": 12, "certain": 15, "chanc": 3, "chang": [12, 14, 15, 16, 17], "charact": 5, "chart": 0, "check": [5, 6, 7, 9, 14, 15, 16, 17, 18], "check_checkpoint_equ": 15, "check_circular": 5, "check_dp_us": 15, "check_epsilon": 15, "check_equ": 16, "check_input": 14, "check_max": 16, "check_min": 16, "check_optimizer_allow": 15, "check_optimizer_is_dp": 15, "check_typ": 16, "checker": [14, 15, 16, 17, 18], "checkfil": 10, "checkpoint": 15, "checkpointopt": 15, "child": 14, "children": 15, "choic": 3, "choos": 15, "chosen": 15, "chunk": 5, "circular": 5, "class": [0, 2, 5, 6, 7, 8, 9, 13, 14, 15, 17, 18], "class_weight": [12, 15], "classes_": [14, 17], "classif": [14, 17], "classifi": [3, 14, 15, 17, 18], "classmethod": 15, "clear": 15, "code": [0, 1, 5, 6, 12, 15], "collect": 15, "column": [8, 17], "com": 3, "combin": [6, 8], "combint": 6, "comment": 12, "common": [10, 12], "compact": 5, "compar": [5, 14, 15, 16], "comparison": 16, "compat": 15, "compil": 15, "compile_from_config": 15, "compiled_metr": 15, "complex": [14, 16], "compliant": [5, 10, 15], "compon": [4, 14, 17], "compos": 15, "comput": [3, 4, 8, 14, 15, 17, 18], "compute_dtyp": 15, "compute_loss": 15, "compute_mask": 15, "compute_metr": 15, "compute_output_shap": 15, "compute_output_signatur": 15, "concret": 15, "confid": [3, 10], "config": 15, "configur": 15, "connect": 15, "consid": [3, 15], "consist": [5, 15, 17], "constant": 15, "constant_initi": 15, "constraint": [12, 14, 15, 16, 17, 18], "construct": [0, 2, 6, 8, 15], "constructor": [5, 15, 16], "contain": [0, 5, 7, 12, 14, 15, 16, 17, 18], "content": [5, 12, 15, 16], "continu": 15, "control": [8, 10, 15], "conv2d": 15, "convert": [3, 5, 14, 17], "convert_to_tensor": 15, "cope": 5, "copi": [14, 15, 16, 17, 18], "corefunction": 12, "correct": [4, 8], "correctli": [14, 17], "correspond": [3, 14, 15, 17], "cost": 14, "cost_complexity_pruning_path": 14, "could": 15, "count": 15, "count_param": 15, "cp": 12, "cpu": 0, "creat": [4, 5, 6, 12, 14, 15, 16, 17, 18], "create_lr_report": 5, "create_mia_report": 5, "criteria": 14, "criterion": [12, 14, 17], "csc_matrix": 14, "csr": [14, 17], "csr_matrix": [14, 17], "csv": 7, "cur_val": 16, "curr_separ": [14, 15, 16, 17, 18], "curr_val": [14, 15, 16, 17, 18], "current": [6, 14, 15, 16, 17, 18], "custom": [5, 15], "custom_metr": 15, "custom_metric_nam": 15, "custom_object": 15, "customizing_what_happens_in_fit": 15, "customjsonencod": 5, "d": 15, "d1": 15, "d2": 15, "dai": 5, "dare": 9, "data": [3, 5, 7, 8, 9, 14, 15, 17], "datapoint": [14, 17], "dataset": [0, 7, 14, 15, 16, 17, 18], "dataset_nam": 7, "datastructur": [12, 16], "deal": [14, 15, 16, 17, 18], "debug": 15, "decis": [6, 11, 12, 14, 17], "decision_path": [14, 17], "decision_tree_internal_trees_are_equ": 14, "decision_trees_are_equ": 14, "decisiontreeclassifi": [6, 10, 14], "declar": 15, "decod": 5, "decor": 15, "deep": [14, 15, 16, 17, 18], "deepcopi": 12, "def": [12, 15], "default": [3, 5, 6, 8, 14, 15, 16, 17], "defin": [7, 14, 15, 16, 17, 18], "definit": 3, "deleg": 15, "delet": 10, "deliber": [14, 15, 16, 17, 18], "deliv": [9, 15], "dens": 15, "depend": [12, 15], "deprec": 15, "depth": 14, "descent": 15, "describ": [7, 15, 16], "descript": [7, 15, 16], "design": [6, 10, 15], "dest": 5, "detail": [6, 10, 11, 14, 15], "determin": [2, 8, 14, 15, 16, 17, 18], "develop": 15, "deviat": [2, 3, 4], "dhat": 18, "dict": [0, 2, 3, 5, 6, 7, 8, 12, 14, 15, 16, 17, 18], "dictionari": [0, 3, 5, 7, 8, 14, 15, 16, 17, 18], "differ": [3, 6, 8, 12, 15], "differenti": [15, 18], "dim": 12, "dimens": [12, 15], "directli": [15, 16], "directori": [0, 2, 6, 8, 12, 14, 15, 16, 17, 18], "disabl": 15, "disclos": [14, 15, 16, 17, 18], "disclosur": [7, 10, 16], "discoveri": 3, "discuss": 15, "displai": 15, "distanc": 14, "distribut": [8, 15], "distribute_reduction_method": 15, "distribute_strategi": 15, "distributionstrategi": 15, "diustribut": 3, "do": [8, 10, 12, 14, 15], "doc": 12, "document": [5, 15], "doe": 15, "doesn": 15, "don": [14, 15], "done": 15, "door": [14, 15, 16, 17, 18], "downstream": 15, "dp": 15, "dp_epsilon_met": 15, "drawn": 17, "dropout": 15, "dt_get_equivalence_class": 6, "dtensor": 15, "dtree": 6, "dtype": [14, 15, 17], "dtype_polici": 15, "dummi": [4, 5, 8], "dummy_attack_experiment_logg": 5, "dummy_attack_experiments_logg": 4, "dummy_attack_metrics_experiment_0": 4, "dummy_attack_metrics_experiment_1": 4, "dummy_attack_metrics_experiment_n": 4, "dump": 15, "dure": [5, 14, 15], "dynam": [15, 17], "dynamic_batch": 15, "e": [4, 6, 7, 12, 14, 15, 16, 17, 18], "each": [2, 4, 5, 8, 14, 15, 17], "eager": 15, "eagerli": 15, "easier": 15, "easili": 15, "edit": 12, "effect": [14, 17], "either": [14, 15], "element": [5, 14, 15, 17], "elimin": 5, "emploi": 15, "empti": 15, "enabl": 15, "enable_metadata_rout": [14, 17], "enable_tune_steps_per_execut": 15, "encapsul": [14, 17], "encod": [5, 6, 7, 15], "end": [14, 15, 17], "endpoint": 15, "ensembl": [8, 17], "ensur": [5, 12], "ensure_ascii": 5, "enter": 15, "entir": 15, "entri": [4, 15], "environ": [9, 10, 15], "ep": 18, "epoch": 15, "epsilon": 15, "epsrc": 9, "equal": [14, 16], "equival": [6, 15], "error": [10, 14, 15, 17], "escap": 5, "essenti": 3, "estim": [14, 17], "estimators_": 12, "estimators_samples_": 17, "etc": [5, 8, 14, 15], "eter": 10, "evalu": 15, "evaluate_gener": 15, "even": 15, "everi": [15, 17], "exact": 15, "exactli": 15, "examin": 16, "examine_separ": [15, 16], "examine_separately_item": 16, "examine_seperate_item": [14, 15, 16, 17, 18], "examine_seperately_item": [12, 16, 17, 18], "exampl": [1, 3, 4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 18], "exclud": [14, 15, 16, 17, 18], "execut": [0, 2, 6, 8, 15], "exhaust": 15, "exist": [5, 12, 14, 15, 16, 17, 18], "expand": 15, "expand_nest": 15, "expect": [14, 15, 16, 17, 18], "experi": [4, 5, 8], "experiment": 6, "experimental_autocast": 15, "explicit": 15, "explicitli": 15, "explor": 11, "export": 15, "exportarch": 15, "ext": [7, 14, 15, 16, 17, 18], "extend": [9, 13], "extens": [7, 12, 14, 15, 16, 17, 18], "extra": 15, "extract": [6, 12], "f": 12, "f1": 3, "fact": 15, "fall": 15, "fals": [2, 3, 4, 5, 6, 8, 12, 14, 15, 16, 17, 18], "faq": 15, "far": 3, "faster": 15, "featur": [7, 8, 14, 17, 18], "feature_importances_": [14, 17], "feedback": [10, 15], "fetch": 17, "file": [6, 7, 14, 15, 16, 17, 18], "filenam": [7, 16, 17, 18], "filepath": 15, "final": 15, "finalize_st": 15, "find": 15, "fine": 15, "finish": 15, "first": [8, 15], "fit": [7, 10, 14, 15, 16, 17, 18], "fit_gener": 15, "fix": [14, 15, 16, 17, 18], "fix_vari": 2, "flag": 3, "flat": 15, "float": [2, 3, 5, 8, 14, 15, 17, 18], "float16": 15, "float32": [14, 15, 17], "fly": 15, "fnr": 3, "folder": [1, 7], "follow": [3, 4, 5, 14, 15], "font": 5, "font_siz": 5, "font_styl": 5, "foo": 5, "footprint": 17, "forc": 15, "forest": 17, "form": [14, 15, 16, 17, 18], "format": [7, 12, 14, 15, 16, 17, 18], "forward": 15, "found": [1, 12, 15], "fpdf": 5, "fpr": [3, 4], "fraction": [0, 14, 17], "framework": 15, "free": 15, "frequenc": 3, "fresh": 15, "from": [2, 4, 5, 6, 7, 8, 9, 12, 15, 16, 17], "from_config": 15, "from_tensor_slic": 15, "frozen": 15, "full": 15, "function": [5, 15, 16], "g": [7, 12, 14, 15, 16, 17, 18], "gamma": 18, "gap": 14, "gaussian": 3, "gener": [0, 2, 5, 6, 8, 15, 17], "generate_arrai": 8, "get": [0, 2, 5, 6, 8, 14, 15, 16, 17, 18], "get_array_csv": 7, "get_array_pkl": 7, "get_build_config": 15, "get_compile_config": 15, "get_concrete_funct": 15, "get_config": 15, "get_current_and_saved_model": [14, 15, 16, 17, 18], "get_depth": 14, "get_equivalence_class": 6, "get_input_at": 15, "get_input_mask_at": 15, "get_input_shape_at": 15, "get_k_anonym": [12, 17], "get_lay": 15, "get_metadata_rout": [14, 17], "get_metr": 3, "get_metrics_result": 15, "get_model_param_count": 6, "get_n_leav": 14, "get_output_at": 15, "get_output_mask_at": 15, "get_output_shape_at": 15, "get_param": [0, 2, 6, 8, 14, 15, 16, 17, 18], "get_tree_k_anonym": 14, "get_tree_parameter_count": 6, "get_unnecessary_risk": 6, "get_weight": [12, 15], "get_weight_path": 15, "getter": 15, "getting_start": 15, "gini": [14, 17], "github": 3, "give": [10, 15, 17], "given": [3, 4, 5, 14, 15, 16, 17], "global": [2, 4, 15], "global_metr": 4, "go": 15, "goe": [14, 17], "gradient": 15, "gradientboostingclassifi": 12, "gradienttap": 15, "graimatt": 9, "grant": 9, "graph": 15, "greater": [10, 15], "greedili": 15, "grid": 6, "group": 15, "guarante": [5, 15], "guid": [11, 14, 15, 17], "guidelin": 9, "h5": 15, "h5py": 15, "ha": [0, 4, 6, 7, 9, 10, 14, 15, 16, 17, 18], "handl": [7, 12, 15], "happen": 15, "harmon": 3, "harsh": [14, 17], "has_data": 7, "has_proba": 7, "has_raw_data": 7, "hasattr": 15, "have": [4, 5, 6, 8, 12, 14, 15, 16, 17], "haven": 15, "hdf5": 15, "hdr": 9, "health": 9, "help": 12, "helpfunct": 12, "henc": 15, "here": [14, 15, 17, 18], "high": [3, 6, 14, 17], "higher": [15, 17], "highest": [3, 8, 17], "highli": 6, "hold": 8, "horizont": 15, "hot": [6, 15], "how": [1, 14, 15, 17], "http": [2, 3, 15], "hyper": 6, "hyperparamet": [6, 8], "hypothesi": 3, "i": [0, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18], "id": [4, 16], "identifi": [4, 10, 14, 15, 16, 17, 18], "ignor": [14, 15, 16, 17], "ignore_item": [16, 17, 18], "ii": [6, 15], "iia": 15, "iii": 15, "implement": [3, 7, 10, 11, 12, 15], "import": [5, 14, 17], "importerror": 15, "impur": [14, 17], "inbound": 15, "inbound_nod": 15, "includ": [3, 15], "include_model_correct_featur": 8, "inclus": [8, 15], "incom": [5, 15], "incompat": 15, "incorrect": 3, "incorrectli": 3, "increas": [14, 15, 16, 17, 18], "indent": 5, "independ": 3, "index": [9, 12, 14, 15, 17], "indic": [7, 14, 15, 16, 17, 18], "individu": [2, 3, 15], "infer": [0, 5, 6, 14, 15, 16, 17, 18], "infin": 5, "infinit": 5, "inform": [7, 14, 15, 16, 17, 18], "inherit": [12, 15], "init": 15, "initi": 15, "initial_epoch": 15, "initialis": 18, "inner": 15, "innov": 9, "input": [7, 14, 15, 17, 18], "input_data": 15, "input_featur": 18, "input_mask": 15, "input_shap": 15, "input_signatur": 15, "input_spec": 15, "input_vector": 18, "inputspec": 15, "insert": [5, 15], "insid": [14, 15, 17], "inspect": [6, 14, 17], "instanc": [2, 4, 8, 14, 15, 17], "instance_0": 4, "instance_1": 4, "instance_n": 4, "instanti": 15, "instead": [14, 15, 17], "int": [0, 2, 3, 5, 6, 7, 8, 14, 15, 17, 18], "integ": [5, 8, 14, 15], "intend": 15, "interact": 15, "interf": [14, 16, 17, 18], "interfac": 7, "intern": [14, 15, 17], "interpret": 15, "introduct": 9, "invalid": 15, "invers": 15, "io": 15, "ion": 10, "isn": 15, "issu": [3, 15], "item": [5, 14, 15, 16, 17, 18], "item_separ": 5, "iter": [4, 8, 15], "iterencod": 5, "its": [15, 17], "iv": 15, "javascript": [5, 12], "jit_compil": 15, "json": [0, 1, 2, 5, 6, 8, 9, 10, 14, 15, 16, 17, 18], "json_str": 15, "jsonencod": 5, "just": [12, 15, 16], "k": [14, 17], "k_anonym": 12, "k_hat_svm": 18, "keep": 15, "kei": [4, 5, 12, 15, 16], "kera": [15, 16], "kernel": 15, "kernel_initi": 15, "key_separ": 5, "keyword": 15, "know": [14, 15], "known": [3, 14, 15, 17], "known_issu": 15, "kwarg": [12, 14, 15, 17, 18], "kwarg_spec": 15, "l": 15, "label": [3, 14, 15, 17], "lambda": 15, "larg": 15, "last": [14, 15, 16, 17, 18], "later": 15, "latter": [14, 17], "layer": [12, 15], "layer_a": 15, "layer_b": 15, "layer_nam": 15, "layer_rang": 15, "leaf": [14, 17], "learn": [6, 10, 12, 15, 16], "least": 6, "leav": 14, "led": 6, "left": 15, "len": [12, 15], "length": [8, 15], "less": [10, 16], "let": 15, "level": [5, 14, 15, 16, 17, 18], "lightweight": 15, "like": [6, 14, 15, 17], "likelihood": 2, "likelihood_attack": 2, "limit": [12, 15], "line": [5, 15], "line_length": 15, "link": [4, 12], "lira": [1, 5, 9], "liraattack": 2, "list": [5, 7, 8, 12, 14, 15, 16, 17, 18], "load": [7, 15], "load_arrai": 7, "load_model": [7, 15], "load_own_vari": 15, "load_safe_keras_model": 15, "load_weight": 15, "locat": 15, "log": [3, 4, 14, 15, 16, 17], "log2": 6, "log_id": 4, "log_p": 3, "log_tim": 4, "logger": 4, "logic": [15, 16], "logp": 3, "long": 15, "longer": 15, "look": 15, "lookup": 15, "loop": 15, "loss": 15, "loss_track": 15, "low": 3, "lower": [6, 15], "lowest": 3, "m": 15, "m1": [12, 15], "m1d": 12, "m1layer": 12, "m2": [12, 15], "m2d": 12, "m2layer": 12, "machin": [10, 12, 15, 16], "made": 8, "mae": 15, "mai": [3, 10, 12, 15, 16, 17], "main": [2, 12], "maintain": 4, "make": [5, 12, 15, 16], "make_predict_funct": 15, "make_test_funct": 15, "make_train_funct": 15, "man": 12, "mani": [14, 17], "manual": 15, "map": [0, 2, 6, 8, 15], "mappingproxi": 16, "mask": 15, "masking_and_pad": 15, "match": [12, 15], "math": 15, "math_op": 15, "mathemat": 15, "matmul": 15, "matrix": [14, 15, 17, 18], "max_depth": [12, 14], "max_featur": [6, 12], "max_leaf_nod": 12, "max_queue_s": 15, "max_sampl": 12, "maxd": 3, "maximum": [14, 15, 16], "mc_pc_21033": 9, "mc_pc_23006": 9, "mean": [3, 4, 14, 15, 17], "meant": 15, "mechan": [14, 17], "meet": 15, "member": [3, 5, 17], "membership": [3, 5, 6], "memori": 17, "messag": [14, 15, 16, 17, 18], "meta": [14, 17], "metadata": [4, 5, 14, 15, 16, 17, 18], "metadata_rout": [14, 17], "metadatarequest": [14, 17], "meter": 10, "method": [0, 2, 3, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18], "metric": [1, 2, 4, 5, 8, 9, 14, 15, 17], "metric_1": 15, "metric_2": 15, "metric_result": 15, "metrics_nam": 15, "mia": [3, 6, 14, 15, 16, 17, 18], "mia_metr": 8, "might": 15, "migrat": 15, "min": [10, 16], "min_impurity_decreas": 12, "min_max_desc": 3, "min_max_disc": 3, "min_sample_split": 8, "min_samples_leaf": [8, 10, 12, 16], "min_samples_split": 12, "min_weight_fraction_leaf": 12, "mind": 3, "minim": 14, "minimal_cost_complexity_prun": 14, "minimum": [16, 17], "mislead": [14, 17], "mismatch": 15, "mix": 15, "mixed_precis": 15, "ml": [3, 12], "mmd": 3, "mod": 15, "mode": [2, 15], "model": [0, 2, 4, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18], "model_from_json": 15, "model_from_yaml": 15, "model_load_fil": [16, 17, 18], "model_path": 7, "model_save_fil": [10, 12, 16, 17, 18], "model_typ": [10, 12, 16, 17, 18], "modeltomakesaf": 12, "modifi": 15, "modul": [9, 15], "monoton": 3, "more": [10, 12, 15, 16, 17], "most": [5, 6, 15], "move": 15, "mr": 9, "mrc": 9, "mse": 15, "msg": [14, 15, 16, 17, 18], "multi": [14, 17], "multipl": 15, "multiprocess": 15, "must": [10, 12, 15], "my": 15, "my_input": 15, "my_metric_lay": 15, "my_modul": 15, "mylay": 15, "mymetriclay": 15, "mymodel": 15, "mymodul": 15, "mysocket": 5, "n": [4, 10, 16], "n_class": [14, 17], "n_cpu": 0, "n_dummy_rep": [4, 8], "n_estim": [12, 17], "n_featur": [14, 17], "n_job": 12, "n_leav": 14, "n_neg": 3, "n_neg_test_exampl": 4, "n_node": [14, 17], "n_nodes_ptr": 17, "n_output": [14, 17], "n_po": 3, "n_pos_test_exampl": 4, "n_rep": [4, 8], "n_row": 8, "n_rows_in": 8, "n_rows_out": 8, "n_sampl": [14, 17], "n_shadow_model": 2, "n_sig_auc_p_v": 4, "n_sig_auc_p_vals_correct": 4, "n_sig_pdif_v": 4, "n_sig_pdif_vals_correct": 4, "name": [0, 2, 4, 6, 7, 8, 14, 15, 16, 17, 18], "name_scop": 15, "nan": 5, "ndarrai": [3, 5, 7, 8, 12, 14, 17, 18], "ndim": 15, "neag": 3, "necessari": 15, "necessarili": 15, "need": [12, 15], "neg": [3, 5, 14], "nest": [14, 15, 17], "net": [14, 15], "network": [12, 15], "neural": 12, "never": [15, 17], "new": [12, 15], "new_model_templ": 12, "newli": [12, 15], "newlin": 5, "nice": 15, "node": [6, 14, 15, 17], "node_count": 14, "node_index": 15, "nois": 15, "noisi": 3, "non": [3, 5, 14, 15, 17], "non_trainable_vari": 15, "non_trainable_weight": 15, "none": [0, 2, 5, 6, 7, 8, 12, 14, 15, 16, 17, 18], "nor": 15, "normal": [14, 15, 17], "notat": 12, "note": [3, 14, 15, 16, 17, 18], "notebook": [14, 15, 17, 18], "notimplementederror": 15, "now": 15, "np": [3, 5, 7, 8, 12, 14, 15, 17], "npv": 3, "null": [3, 14, 15, 16, 17, 18], "null_auc_3sd_rang": 4, "num_exampl": 15, "num_sampl": 15, "number": [0, 2, 3, 4, 6, 8, 9, 12, 14, 15], "numer": 15, "numlay": 12, "numpi": [5, 15], "numpydoc": 12, "o": 5, "object": [0, 2, 3, 5, 6, 8, 12, 14, 15, 16, 17, 18], "observ": [3, 4], "obtain": 15, "offer": 15, "offlin": 2, "often": 15, "on_read": 15, "on_test_batch_end": 15, "on_train_batch_end": 15, "one": [4, 6, 8, 12, 15, 17], "ones": 15, "onli": [4, 5, 14, 15, 16, 17], "onlin": 2, "oob_scor": 12, "op": 15, "open": [10, 12], "oper": [15, 16], "opt": 15, "optim": [14, 15, 16, 17, 18], "optimis": 15, "option": [7, 14, 15, 16, 17, 18], "order": [6, 14, 15, 17], "org": [2, 3, 15], "origin": [7, 14, 15, 17], "other": [12, 14, 15, 17], "otherwis": [5, 6, 14, 15, 17], "our": 15, "out": [8, 15], "out_1_acc": 15, "out_1_loss": 15, "out_1_ma": 15, "out_acc": 15, "out_loss": 15, "out_ma": 15, "outbound_nod": 15, "output": [0, 1, 2, 5, 6, 7, 8, 9, 14, 15, 16, 17, 18], "output_1": 15, "output_2": 15, "output_dir": [0, 2, 6, 8, 14, 15, 16, 17, 18], "output_mask": 15, "output_shap": 15, "outputs_safemodel": [14, 15, 16, 17, 18], "over": 15, "overload": [14, 16, 17, 18], "overrid": 15, "overridden": 15, "overwrit": 15, "own": 15, "p": [3, 4, 17], "p_thresh": [2, 4, 8], "p_valu": 4, "packag": [10, 12], "page": [9, 12], "pai": 15, "pair": 15, "para": 10, "param": [0, 2, 6, 8, 10, 12, 14, 15, 17, 18], "paramet": [0, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18], "parameterserverstrategi": 15, "parseabl": 10, "part": [9, 15], "partial": 15, "particularli": 15, "partnership": 9, "pass": [14, 15, 17], "path": [0, 6, 7, 14, 15, 16, 17, 18], "pathlib": 15, "pathlik": 15, "pattern": 15, "pdf": [0, 2, 3, 5, 6, 8, 14, 15, 16, 17, 18], "pdf_report": 5, "pdif": 4, "pdif_sig": 4, "pdif_val": [2, 8], "pearamet": 12, "per": [2, 8, 15], "perform": [15, 16, 17], "permut": 3, "permutation_import": [14, 17], "permute_row": 3, "persist": 7, "phase": 9, "phi_hat": 18, "phi_hat_multi": 18, "pickl": 7, "pickleabl": 15, "pictur": 9, "pipelin": [14, 17], "pkl": [7, 10, 14, 15, 16, 17, 18], "place": 5, "placehold": [15, 16], "pleas": [14, 15, 17], "plot": 0, "plot_categorical_fract": 0, "plot_categorical_risk": 0, "plot_quantitative_risk": 0, "polici": 15, "pose": 15, "posit": [3, 4, 15], "possibl": [4, 14, 15, 16, 17, 18], "possibli": 14, "posthoc": [15, 16], "posthoc_check": [14, 15, 16, 17, 18], "postprocess": 15, "potenti": [14, 15, 16, 17, 18], "ppv": 3, "preced": 15, "precis": [3, 15], "pred": 8, "pred_prob": 3, "predic": 15, "predict": [3, 6, 7, 8, 14, 15, 17, 18], "predict_gener": 15, "predict_log_proba": [14, 17], "predict_on_batch": 15, "predict_proba": [7, 14, 17, 18], "predict_step": 15, "prefer": 15, "prefix": 15, "preliminary_check": [12, 14, 15, 16, 17, 18], "present": [4, 10, 16], "preserv": 15, "pretti": 5, "prevent": [5, 14, 15, 16, 17, 18], "print": [5, 12, 15], "print_fn": 15, "privaci": [3, 12, 14, 15, 16, 17, 18], "privat": 18, "proba": 14, "proba_test": [7, 8], "proba_train": [7, 8], "probabl": [3, 6, 7, 8, 14, 17, 18], "process": [7, 14, 15], "produc": 15, "product": 15, "programm": 9, "progress": 15, "project": [9, 18], "prompt": 15, "propag": 15, "proper": 15, "properli": 15, "properti": [6, 14, 15, 17], "proport": [3, 8], "protect": [12, 14, 15, 16, 17, 18], "prototyp": 16, "provid": [10, 14, 15, 17], "prune": 14, "pval": 3, "py": 12, "python": [5, 14, 15, 17, 18], "quantit": 0, "quantiz": 15, "queue": 15, "r": [14, 17], "rais": [5, 14, 15, 17], "rand": 3, "randint": 15, "random": [3, 4, 6, 15, 17], "random_st": 12, "randomforestclassifi": 8, "rang": [4, 12, 15, 16], "rank": [6, 15], "rate": [3, 4], "rather": 15, "raw": 7, "re": [0, 14, 15, 17], "read": [6, 15, 16], "real": 15, "reappli": 15, "reason": [10, 15], "recal": 3, "receiv": 15, "recognis": 6, "recommend": [10, 15, 16], "recommendat": 10, "record": [2, 15, 17], "recurs": [5, 15], "recursionerror": 5, "reduc": [15, 17], "reduce_mean": 15, "reduce_per_replica": 15, "reduce_sum": 15, "reduct": [14, 15, 17], "refer": [5, 15], "referenc": 15, "refine_epsilon": 15, "reflect": [12, 15], "regener": 15, "regex": 15, "regist": 15, "regress": [5, 6, 14], "regular": 15, "reinstanti": 15, "rel": 15, "relat": 4, "releas": 10, "relev": [14, 16, 17], "reli": 15, "reload": 15, "reloaded_artifact": 15, "remain": 3, "remov": 15, "render": 12, "rep": 8, "repeat": 15, "repetit": [4, 8], "replac": 15, "replica": 15, "report": [0, 1, 2, 6, 8, 9, 10, 14, 15, 16, 17, 18], "report_categor": 0, "report_dest": 5, "report_individu": 2, "report_quantit": 0, "repres": [4, 15], "represent": 5, "reproduc": 8, "reproduce_split": 8, "request": [14, 17], "request_releas": [14, 15, 16, 17, 18], "requir": [12, 14, 15, 17], "research": [9, 10, 16, 17, 18], "reset": 15, "reset_metr": 15, "reset_st": 15, "resourc": 9, "resourcevari": 15, "resourcevariables_instead_of_referencevari": 15, "restart": [14, 15, 16, 17, 18], "restor": 15, "restrict": [14, 15, 16, 17, 18], "result": [0, 7, 14, 15, 16, 17, 18], "retain": [14, 17], "retriev": 15, "return": [0, 2, 3, 5, 6, 7, 8, 12, 14, 15, 16, 17, 18], "return_dict": 15, "reus": 15, "revers": 15, "risk": [0, 6, 10, 15, 16], "risk_appetite_config": 6, "riski": 6, "root": [14, 15, 17], "round": 15, "rout": [14, 17], "row": 8, "rst": 12, "rule": [6, 14, 15, 16, 17, 18], "run": [0, 1, 2, 6, 8, 14, 15, 16, 17, 18], "run_attack": [14, 15, 16, 17, 18], "run_attack_rep": 8, "run_eagerli": 15, "runtimeerror": 15, "s010351": 9, "sacro": [3, 12], "sacroml": [0, 2, 3, 5, 6, 7, 8, 14, 15, 16, 17, 18], "safe": [12, 14, 15, 16, 17, 18], "safedecisiontre": [9, 12, 13], "safedecisiontreeclassifi": 14, "safegradientboost": 12, "safekera": [12, 15], "safekerasclassif": [14, 16, 17, 18], "safekerasmodel": [9, 13], "safemodel": [7, 9, 11, 14, 15, 16, 17, 18], "safemodeltomakesaf": 12, "saferandomforest": [9, 12, 13], "saferandomforestclassifi": [16, 17], "saferfmodel": 16, "safesvc": [9, 13], "same": [12, 14, 15, 16, 17], "same_config": 15, "same_weight": [12, 15], "sampl": [3, 8, 14, 15, 17], "sample_weight": [14, 15, 17], "sav": [7, 14, 15, 16, 17, 18], "save": [7, 10, 14, 15, 16, 17, 18], "save_format": 15, "save_model": 15, "save_own_vari": 15, "save_spec": 15, "save_weight": 15, "saved_model": [12, 15, 16], "saved_separ": [14, 15, 16, 17, 18], "saved_v": [14, 15, 16, 17, 18], "savedmodel": 15, "scalar": 15, "scale": 18, "scenario": [2, 5], "scope": 15, "score": [0, 3, 14, 17], "sdc": 3, "search": [6, 9, 14], "section": 15, "secur": 15, "see": [3, 14, 15, 17], "self": [12, 14, 15, 16, 17, 18], "semi": 9, "sensibl": 5, "sent": 18, "separ": [5, 15, 16], "sequenc": 15, "sequence_length": 15, "sequenti": 15, "serial": [5, 15], "serializ": 15, "serv": 15, "serving_default": 15, "set": [6, 8, 14, 15, 16, 17, 18], "set_config": [14, 17], "set_fit_request": [14, 17], "set_param": [14, 17, 18], "set_score_request": [14, 17], "set_weight": 15, "settabl": 15, "sever": 14, "sgd": 15, "shadow": 2, "shape": [3, 12, 14, 15, 17], "share": 15, "should": [5, 12, 14, 15, 17], "show": [0, 1, 15], "show_train": 15, "shown": 15, "shuffl": 15, "signatur": 15, "signific": [2, 4, 8], "silent": 15, "similar": [4, 6], "simpl": [14, 17], "simpli": 5, "sinc": [3, 14, 15, 16, 17, 18], "singl": [4, 5, 14, 15, 17, 18], "size": [12, 15, 17], "skip": [5, 15], "skip_mismatch": 15, "skipkei": 5, "sklearn": [7, 8, 12, 14, 17, 18], "slower": [15, 17], "small": 15, "smallest": 14, "so": [12, 14, 15, 17], "some": [3, 12, 14, 15, 17], "sort": [5, 8, 15], "sort_kei": 5, "sort_prob": 8, "sourc": [0, 2, 3, 5, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18], "space": 18, "spars": [14, 15, 17], "specif": [4, 5, 9, 12, 14, 15, 16, 17, 18], "specifi": [5, 6, 14, 15, 16, 17, 18], "spin": 15, "split": [7, 8, 14, 15, 16, 17, 18], "splitter": 6, "sqrt": 6, "squared_differ": 15, "stabil": 15, "stabl": 15, "standalon": 15, "standard": [2, 3, 4, 5, 6], "standardis": 4, "start": 15, "state": 15, "state_upd": 15, "statefulli": 15, "static": [6, 15], "stdout": 15, "step": [12, 15], "steps_per_epoch": 15, "steps_per_execut": 15, "still": 15, "storag": 7, "store": [0, 2, 4, 7, 8, 12, 14, 15, 16, 17, 18], "str": [0, 2, 5, 6, 7, 8, 12, 14, 15, 16, 17, 18], "strategi": 15, "string": [0, 5, 14, 15, 16, 17, 18], "structur": [1, 5, 9, 14, 15], "structural_attack": 6, "structuralattack": 6, "studi": 6, "sub": [14, 15, 17], "subclass": 15, "subclassmodel": 15, "subject": 6, "submodul": 15, "subset": [8, 14, 17], "substitut": 15, "subtitl": 5, "subtre": 14, "success": 3, "suffici": 15, "suffix": 15, "suit": 12, "sum": [14, 17], "summari": 15, "super": [12, 15, 16], "suppli": 15, "support": [6, 9, 15, 18], "supports_mask": 15, "sure": [15, 16], "svc": 18, "svm": 18, "symbol": 15, "synchron": 15, "t": [5, 14, 15, 17], "tabl": [6, 15], "take": [5, 15], "taken": [12, 15], "target": [0, 1, 2, 4, 6, 8, 9, 14, 15, 16, 17, 18], "target_model": 4, "target_model_param": 4, "task": 6, "tell": [3, 15], "tempor": 15, "tensor": 15, "tensorflow": [3, 14, 15, 16, 17, 18], "tensorshap": 15, "tensorspec": 15, "termin": 15, "test": [2, 3, 4, 5, 7, 8, 12, 14, 15, 17], "test_beta": 8, "test_correct": 8, "test_featur": 18, "test_on_batch": 15, "test_prop": 8, "test_step": 15, "text": 5, "tf": 15, "tf1_vs_tf2": 15, "th": 17, "than": [10, 15, 16, 17], "the_kwd": 12, "thei": [12, 14, 15], "them": 15, "themselv": 15, "thereof": 15, "thetre": 14, "thi": [0, 2, 3, 4, 5, 6, 8, 9, 11, 12, 14, 15, 16, 17, 18], "thing": [2, 8], "third": 15, "those": [14, 15, 16, 17, 18], "thread": 15, "three": [4, 15], "threshold": [2, 8, 14], "through": [10, 14, 17], "throw": 15, "thu": [14, 15, 16, 17, 18], "time": [4, 15], "timestamp": [12, 16, 17, 18], "timestep": 15, "titl": 5, "tnr": 3, "to_json": 15, "to_yaml": 15, "top": [6, 15], "topolog": 15, "topologi": 15, "total": [14, 15, 17], "tpr": [3, 4], "trace": 15, "track": 15, "train": [0, 2, 6, 7, 8, 14, 15, 16, 17, 18], "train_beta": 8, "train_correct": 8, "train_featur": 18, "train_label": 18, "train_on_batch": 15, "train_step": 15, "trainabl": 15, "trainable_vari": 15, "trainable_weight": 15, "transfer": 15, "transform": [3, 15], "travers": 15, "tre": [6, 10, 14, 15, 16, 17, 18], "treat": 15, "tree": [6, 11, 12, 14, 17], "tree1": 14, "tree1_tre": 14, "tree2": 14, "tree2_tre": 14, "tree_": 14, "true": [0, 2, 3, 4, 5, 6, 8, 12, 14, 15, 16, 17, 18], "trust": [9, 10], "try": 15, "tune": 15, "tupl": [3, 5, 6, 8, 12, 14, 15, 16, 17, 18], "two": [14, 15, 16], "type": [3, 4, 6, 12, 14, 15, 16], "typeerror": [5, 15], "typic": 15, "uk": 9, "unambigu": 15, "unchang": [14, 17], "undefin": [14, 15, 16, 17, 18], "under": [4, 9, 15], "underli": 15, "unexpect": 15, "uniform": 15, "uniqu": [4, 14, 15, 17], "unless": [14, 15, 17], "unlik": 15, "unnecessarili": 6, "unpack": 15, "unprocess": 7, "unrel": 15, "unsaf": [10, 15], "unspecifi": 15, "unsupport": 15, "until": 15, "unus": 15, "unusu": 15, "up": [14, 15, 17], "updat": [14, 15, 17], "update_st": 15, "upheld": [14, 15, 16, 17, 18], "upon": [8, 15], "upstream": 15, "us": [0, 2, 3, 5, 6, 8, 10, 11, 12, 14, 15, 16, 17], "use_multiprocess": 15, "use_resourc": 15, "user": [10, 14, 15, 16, 17], "usual": 3, "util": [14, 15, 17], "v1": 15, "v2": 15, "v3": 15, "val": [12, 16], "valid": [12, 15], "validation_data": 15, "validation_freq": 15, "validation_step": 15, "valu": [0, 2, 3, 4, 6, 8, 10, 14, 15, 16, 17, 18], "valueerror": [5, 15], "variabl": [3, 4, 7, 8, 15], "variable_dtyp": 15, "variableaggreg": 15, "variableaggregationv2": 15, "variablesynchron": 15, "varianc": 15, "variant": 15, "vector": [15, 18], "verbos": [12, 14, 15, 16, 17, 18], "versa": 15, "version": [5, 12, 14, 15, 16, 17, 18], "via": [14, 15, 16, 17, 18], "vice": 15, "view": 15, "violat": [14, 15, 16, 17, 18], "vote": 17, "w": [14, 15, 17], "wa": [4, 6, 9, 14, 15, 16, 17, 18], "wai": 15, "want": 15, "warm_start": 12, "warn": [10, 14, 15, 16, 17], "we": 15, "weight": [12, 14, 15, 17], "weight_nam": 15, "weight_path": 15, "well": [14, 15, 17], "were": [6, 9, 15], "what": [9, 14, 15], "when": [0, 4, 6, 8, 15, 16], "whenev": 15, "where": [0, 2, 4, 8, 10, 14, 15, 17], "whether": [0, 2, 3, 6, 7, 8, 14, 15, 16, 17, 18], "which": [3, 4, 5, 6, 14, 15, 17, 18], "while": [14, 15], "white": [6, 15], "whitespac": 5, "who": 15, "whose": 15, "window": 15, "wish": 15, "with_name_scop": 15, "within": [14, 15, 16], "without": 15, "work": [9, 14, 15, 17], "worker": 15, "workflow": 15, "worst": [1, 5, 9, 14, 15, 16, 17, 18], "worst_case_attack": 8, "worstcaseattack": 8, "would": [5, 6, 14, 15], "wrap": 15, "wrapper": [10, 12, 15, 16], "write": [0, 5, 6, 14, 15, 16, 17, 18], "write_json": 5, "write_pdf": 5, "write_report": [0, 2, 6, 8], "written": 12, "www": 15, "x": [3, 8, 12, 14, 15, 16, 17, 18], "x_leav": [14, 17], "x_orig": 7, "x_prop": 3, "x_test": 7, "x_test_orig": 7, "x_train": 7, "x_train_orig": 7, "xgboost": 12, "xla": 15, "xprop": 3, "y": [3, 12, 14, 15, 16, 17, 18], "y_orig": 7, "y_pred": 15, "y_pred_proba": 3, "y_test": [3, 7], "y_test_orig": 7, "y_train": 7, "y_train_orig": 7, "y_true": 3, "yaml": [6, 7, 15], "yaml_str": 15, "yet": 15, "yield": [5, 15], "you": [5, 12, 14, 15, 17], "your": 15, "yp": 3, "zero": [14, 15, 17]}, "titles": ["Attribute Attack", "Attacks", "LiRA Attack", "Metrics", "JSON Output for Attacks", "Report", "Structural Attack", "Target", "Worst Case Attack", "Welcome to the SACRO-ML documentation!", "Introduction", "Examples", "Extending SafeModel", "Safemodel", "SafeDecisionTree", "SafeKerasModel", "Base Class", "SafeRandomForest", "SafeSVC"], "titleterms": {"The": 12, "__init__": 12, "add": 12, "ani": 12, "attack": [0, 1, 2, 4, 6, 8], "attribut": 0, "base": 16, "case": [4, 8], "check": 12, "class": [12, 16], "confirm": 12, "content": 9, "copi": 12, "core": 12, "data": 12, "defin": 12, "design": 12, "document": [9, 12], "examine_separ": 12, "exampl": 11, "extend": 12, "file": 12, "fit": 12, "full": 11, "function": 12, "fund": 9, "gener": 4, "helper": 12, "i": 10, "ignore_item": 12, "includ": 12, "indic": 9, "introduct": 10, "item": 12, "json": [4, 12], "length": 11, "lira": [2, 4], "method": 12, "metric": 3, "ml": 9, "modular": 12, "notebook": 11, "option": 12, "output": 4, "overrid": 12, "paramnam": 12, "pytest": 12, "quick": 11, "report": 5, "rule": 12, "sacro": 9, "safedecisiontre": [11, 14], "safekera": 11, "safekerasmodel": 15, "safemodel": [10, 12, 13], "safer": 12, "saferandomforest": [11, 17], "safesvc": [11, 18], "sphinx": 12, "start": 11, "statement": 9, "structur": [4, 6, 12], "tabl": 9, "target": 7, "templat": 12, "tutori": 11, "unusu": 12, "updat": 12, "welcom": 9, "what": 10, "worst": [4, 8], "write": 12}})