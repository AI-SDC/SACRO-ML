Search.setIndex({"alltitles": {"Add checks for any unusual data structures": [[14, "add-checks-for-any-unusual-data-structures"]], "Attacks": [[1, "attacks"]], "Attribute Attack": [[0, "module-sacroml.attacks.attribute_attack"]], "Base Class": [[18, "module-sacroml.safemodel.safemodel"]], "Contents:": [[9, null]], "Copy The Template": [[14, "copy-the-template"]], "Define the Safer Class": [[14, "define-the-safer-class"]], "Examples": [[13, "examples"]], "Extending SafeModel": [[14, "extending-safemodel"]], "Funding Statement": [[9, "funding-statement"]], "General Structure": [[4, "general-structure"]], "Include any optional helper functions": [[14, "include-any-optional-helper-functions"]], "Indices and tables": [[9, "indices-and-tables"]], "Introduction": [[10, "introduction"]], "JSON Output for Attacks": [[4, "json-output-for-attacks"]], "LiRA Attack": [[2, "module-sacroml.attacks.likelihood_attack"], [4, "lira-attack"]], "Loaders": [[12, "module-sacroml.preprocessing.loaders"]], "Metrics": [[3, "module-sacroml.metrics"]], "Modular Design": [[14, "modular-design"]], "Override the fit() function": [[14, "override-the-fit-function"]], "Preprocessing": [[11, "preprocessing"]], "Report": [[5, "module-sacroml.attacks.report"]], "SafeDecisionTree": [[16, "safedecisiontree"]], "SafeDecisionTree Full Length Tutorial": [[13, "safedecisiontree-full-length-tutorial"]], "SafeKeras Quick Start Notebook": [[13, "safekeras-quick-start-notebook"]], "SafeKerasModel": [[17, "safekerasmodel"]], "SafeRandomForest": [[19, "saferandomforest"]], "SafeRandomForest Quick Start Notebook": [[13, "saferandomforest-quick-start-notebook"]], "SafeSVC": [[20, "safesvc"]], "SafeSVC Quick Start Notebook": [[13, "safesvc-quick-start-notebook"]], "Safemodel": [[15, "safemodel"]], "Structural Attack": [[6, "module-sacroml.attacks.structural_attack"]], "Target": [[7, "module-sacroml.attacks.target"]], "Update Sphinx documentation": [[14, "update-sphinx-documentation"]], "Update rules.json file": [[14, "update-rules-json-file"]], "Update the __init__ method with paramnames, ignore_items, and examine_separately items": [[14, "update-the-init-method-with-paramnames-ignore-items-and-examine-separately-items"]], "Welcome to the SACRO-ML documentation!": [[9, "welcome-to-the-sacro-ml-documentation"]], "What is safemodel?": [[10, "what-is-safemodel"]], "Worst Case Attack": [[8, "module-sacroml.attacks.worst_case_attack"]], "Worst-Case Attack": [[4, "worst-case-attack"]], "Write pytests to confirm core functionality": [[14, "write-pytests-to-confirm-core-functionality"]], "})": [[17, "id83"]]}, "docnames": ["attacks/attribute", "attacks/index", "attacks/likelihood", "attacks/metrics", "attacks/output_format", "attacks/report", "attacks/structural", "attacks/target", "attacks/worst_case", "index", "introduction", "preprocessing/index", "preprocessing/loaders", "safemodel/examples", "safemodel/extending", "safemodel/index", "safemodel/safedecisiontree", "safemodel/safekeras", "safemodel/safemodel", "safemodel/saferandomforest", "safemodel/safesvc"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1}, "filenames": ["attacks/attribute.rst", "attacks/index.rst", "attacks/likelihood.rst", "attacks/metrics.rst", "attacks/output_format.rst", "attacks/report.rst", "attacks/structural.rst", "attacks/target.rst", "attacks/worst_case.rst", "index.rst", "introduction.rst", "preprocessing/index.rst", "preprocessing/loaders.rst", "safemodel/examples.rst", "safemodel/extending.rst", "safemodel/index.rst", "safemodel/safedecisiontree.rst", "safemodel/safekeras.rst", "safemodel/safemodel.rst", "safemodel/saferandomforest.rst", "safemodel/safesvc.rst"], "indexentries": {"__annotations__ (sacroml.safemodel.safemodel.safemodel attribute)": [[18, "sacroml.safemodel.safemodel.SafeModel.__annotations__", false]], "__apply_constraints() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.__apply_constraints", false]], "__check_model_param() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.__check_model_param", false]], "__check_model_param_and() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.__check_model_param_and", false]], "__check_model_param_or() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.__check_model_param_or", false]], "__dict__ (sacroml.safemodel.safemodel.safemodel attribute)": [[18, "sacroml.safemodel.safemodel.SafeModel.__dict__", false]], "__get_constraints() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.__get_constraints", false]], "__init__() (sacroml.attacks.attribute_attack.attributeattack method)": [[0, "sacroml.attacks.attribute_attack.AttributeAttack.__init__", false]], "__init__() (sacroml.attacks.likelihood_attack.liraattack method)": [[2, "sacroml.attacks.likelihood_attack.LIRAAttack.__init__", false]], "__init__() (sacroml.attacks.report.customjsonencoder method)": [[5, "sacroml.attacks.report.CustomJSONEncoder.__init__", false]], "__init__() (sacroml.attacks.structural_attack.structuralattack method)": [[6, "sacroml.attacks.structural_attack.StructuralAttack.__init__", false]], "__init__() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.__init__", false]], "__init__() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.__init__", false]], "__init__() (sacroml.preprocessing.loaders.datanotavailable method)": [[12, "sacroml.preprocessing.loaders.DataNotAvailable.__init__", false]], "__init__() (sacroml.preprocessing.loaders.unknowndataset method)": [[12, "sacroml.preprocessing.loaders.UnknownDataset.__init__", false]], "__init__() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.__init__", false]], "__init__() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.__init__", false]], "__init__() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.__init__", false]], "__init__() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.__init__", false]], "__init__() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.__init__", false]], "__module__ (sacroml.safemodel.safemodel.safemodel attribute)": [[18, "sacroml.safemodel.safemodel.SafeModel.__module__", false]], "__str__() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.__str__", false]], "activity_regularizer (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.activity_regularizer", false]], "add_feature() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.add_feature", false]], "add_loss() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.add_loss", false]], "add_metric() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.add_metric", false]], "add_processed_data() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.add_processed_data", false]], "add_raw_data() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.add_raw_data", false]], "add_safemodel_results() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.add_safemodel_results", false]], "add_update() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.add_update", false]], "add_variable() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.add_variable", false]], "add_weight() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.add_weight", false]], "additional_checks() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.additional_checks", false]], "additional_checks() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.additional_checks", false]], "additional_checks() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.additional_checks", false]], "additional_checks() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.additional_checks", false]], "additional_checks() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.additional_checks", false]], "apply() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.apply", false]], "apply() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.apply", false]], "args (sacroml.preprocessing.loaders.datanotavailable attribute)": [[12, "sacroml.preprocessing.loaders.DataNotAvailable.args", false]], "args (sacroml.preprocessing.loaders.unknowndataset attribute)": [[12, "sacroml.preprocessing.loaders.UnknownDataset.args", false]], "attack() (sacroml.attacks.attribute_attack.attributeattack method)": [[0, "sacroml.attacks.attribute_attack.AttributeAttack.attack", false]], "attack() (sacroml.attacks.likelihood_attack.liraattack method)": [[2, "sacroml.attacks.likelihood_attack.LIRAAttack.attack", false]], "attack() (sacroml.attacks.structural_attack.structuralattack method)": [[6, "sacroml.attacks.structural_attack.StructuralAttack.attack", false]], "attack() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.attack", false]], "attack_from_preds() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.attack_from_preds", false]], "attributeattack (class in sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.AttributeAttack", false]], "auc_p_val() (in module sacroml.metrics)": [[3, "sacroml.metrics.auc_p_val", false]], "build() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.build", false]], "build_from_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.build_from_config", false]], "call() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.call", false]], "check_checkpoint_equality() (in module sacroml.safemodel.classifiers.safekeras)": [[17, "sacroml.safemodel.classifiers.safekeras.check_checkpoint_equality", false]], "check_dp_used() (in module sacroml.safemodel.classifiers.safekeras)": [[17, "sacroml.safemodel.classifiers.safekeras.check_dp_used", false]], "check_epsilon() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.check_epsilon", false]], "check_equal() (in module sacroml.safemodel.safemodel)": [[18, "sacroml.safemodel.safemodel.check_equal", false]], "check_max() (in module sacroml.safemodel.safemodel)": [[18, "sacroml.safemodel.safemodel.check_max", false]], "check_min() (in module sacroml.safemodel.safemodel)": [[18, "sacroml.safemodel.safemodel.check_min", false]], "check_optimizer_allowed() (in module sacroml.safemodel.classifiers.safekeras)": [[17, "sacroml.safemodel.classifiers.safekeras.check_optimizer_allowed", false]], "check_optimizer_is_dp() (in module sacroml.safemodel.classifiers.safekeras)": [[17, "sacroml.safemodel.classifiers.safekeras.check_optimizer_is_dp", false]], "check_type() (in module sacroml.safemodel.safemodel)": [[18, "sacroml.safemodel.safemodel.check_type", false]], "compile() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compile", false]], "compile_from_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compile_from_config", false]], "compute_dtype (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_dtype", false]], "compute_loss() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_loss", false]], "compute_mask() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_mask", false]], "compute_metrics() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_metrics", false]], "compute_output_shape() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_output_shape", false]], "compute_output_signature() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.compute_output_signature", false]], "cost_complexity_pruning_path() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.cost_complexity_pruning_path", false]], "count_params() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.count_params", false]], "create_lr_report() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.create_lr_report", false]], "create_mia_report() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.create_mia_report", false]], "customjsonencoder (class in sacroml.attacks.report)": [[5, "sacroml.attacks.report.CustomJSONEncoder", false]], "datanotavailable": [[12, "sacroml.preprocessing.loaders.DataNotAvailable", false]], "decision_path() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.decision_path", false]], "decision_path() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.decision_path", false]], "decision_tree_internal_trees_are_equal() (in module sacroml.safemodel.classifiers.safedecisiontreeclassifier)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.decision_tree_internal_trees_are_equal", false]], "decision_trees_are_equal() (in module sacroml.safemodel.classifiers.safedecisiontreeclassifier)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.decision_trees_are_equal", false]], "default() (sacroml.attacks.report.customjsonencoder method)": [[5, "sacroml.attacks.report.CustomJSONEncoder.default", false]], "distribute_reduction_method (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.distribute_reduction_method", false]], "distribute_strategy (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.distribute_strategy", false]], "dp_epsilon_met() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.dp_epsilon_met", false]], "dt_get_equivalence_classes() (sacroml.attacks.structural_attack.structuralattack method)": [[6, "sacroml.attacks.structural_attack.StructuralAttack.dt_get_equivalence_classes", false]], "dtype (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.dtype", false]], "dtype_policy (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.dtype_policy", false]], "dynamic (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.dynamic", false]], "enable_tune_steps_per_execution (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.enable_tune_steps_per_execution", false]], "encode() (sacroml.attacks.report.customjsonencoder method)": [[5, "sacroml.attacks.report.CustomJSONEncoder.encode", false]], "estimators_samples_ (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier property)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.estimators_samples_", false]], "evaluate() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.evaluate", false]], "evaluate_generator() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.evaluate_generator", false]], "examine_seperate_items() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.examine_seperate_items", false]], "examine_seperate_items() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.examine_seperate_items", false]], "examine_seperate_items() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.examine_seperate_items", false]], "examine_seperate_items() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.examine_seperate_items", false]], "examine_seperate_items() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.examine_seperate_items", false]], "examine_seperately_items (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.examine_seperately_items", false]], "examine_seperately_items (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.examine_seperately_items", false]], "export() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.export", false]], "feature_importances_ (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier property)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.feature_importances_", false]], "feature_importances_ (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier property)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.feature_importances_", false]], "filename (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.filename", false]], "filename (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.filename", false]], "finalize_state() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.finalize_state", false]], "fit() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.fit", false]], "fit() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.fit", false]], "fit() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.fit", false]], "fit() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.fit", false]], "fit_generator() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.fit_generator", false]], "from_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel class method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.from_config", false]], "generate_arrays() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.generate_arrays", false]], "get_build_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_build_config", false]], "get_compile_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_compile_config", false]], "get_config() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_config", false]], "get_current_and_saved_models() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.get_current_and_saved_models", false]], "get_current_and_saved_models() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_current_and_saved_models", false]], "get_current_and_saved_models() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.get_current_and_saved_models", false]], "get_current_and_saved_models() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.get_current_and_saved_models", false]], "get_current_and_saved_models() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.get_current_and_saved_models", false]], "get_data_sklearn() (in module sacroml.preprocessing.loaders)": [[12, "sacroml.preprocessing.loaders.get_data_sklearn", false]], "get_depth() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.get_depth", false]], "get_equivalence_classes() (sacroml.attacks.structural_attack.structuralattack method)": [[6, "sacroml.attacks.structural_attack.StructuralAttack.get_equivalence_classes", false]], "get_input_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_input_at", false]], "get_input_mask_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_input_mask_at", false]], "get_input_shape_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_input_shape_at", false]], "get_k_anonymity() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.get_k_anonymity", false]], "get_layer() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_layer", false]], "get_metadata_routing() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.get_metadata_routing", false]], "get_metadata_routing() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.get_metadata_routing", false]], "get_metrics() (in module sacroml.metrics)": [[3, "sacroml.metrics.get_metrics", false]], "get_metrics_result() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_metrics_result", false]], "get_model_param_count() (in module sacroml.attacks.structural_attack)": [[6, "sacroml.attacks.structural_attack.get_model_param_count", false]], "get_n_leaves() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.get_n_leaves", false]], "get_output_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_output_at", false]], "get_output_mask_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_output_mask_at", false]], "get_output_shape_at() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_output_shape_at", false]], "get_params() (sacroml.attacks.attribute_attack.attributeattack method)": [[0, "sacroml.attacks.attribute_attack.AttributeAttack.get_params", false]], "get_params() (sacroml.attacks.likelihood_attack.liraattack method)": [[2, "sacroml.attacks.likelihood_attack.LIRAAttack.get_params", false]], "get_params() (sacroml.attacks.structural_attack.structuralattack method)": [[6, "sacroml.attacks.structural_attack.StructuralAttack.get_params", false]], "get_params() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.get_params", false]], "get_params() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.get_params", false]], "get_params() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_params", false]], "get_params() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.get_params", false]], "get_params() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.get_params", false]], "get_params() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.get_params", false]], "get_tree_k_anonymity() (in module sacroml.safemodel.classifiers.safedecisiontreeclassifier)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.get_tree_k_anonymity", false]], "get_tree_parameter_count() (in module sacroml.attacks.structural_attack)": [[6, "sacroml.attacks.structural_attack.get_tree_parameter_count", false]], "get_unnecessary_risk() (in module sacroml.attacks.structural_attack)": [[6, "sacroml.attacks.structural_attack.get_unnecessary_risk", false]], "get_weight_paths() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_weight_paths", false]], "get_weights() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.get_weights", false]], "ignore_items (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.ignore_items", false]], "ignore_items (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.ignore_items", false]], "inbound_nodes (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.inbound_nodes", false]], "input (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.input", false]], "input_mask (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.input_mask", false]], "input_shape (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.input_shape", false]], "input_spec (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.input_spec", false]], "item_separator (sacroml.attacks.report.customjsonencoder attribute)": [[5, "sacroml.attacks.report.CustomJSONEncoder.item_separator", false]], "iterencode() (sacroml.attacks.report.customjsonencoder method)": [[5, "sacroml.attacks.report.CustomJSONEncoder.iterencode", false]], "jit_compile (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.jit_compile", false]], "k_hat_svm() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.k_hat_svm", false]], "key_separator (sacroml.attacks.report.customjsonencoder attribute)": [[5, "sacroml.attacks.report.CustomJSONEncoder.key_separator", false]], "layers (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.layers", false]], "line() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.line", false]], "liraattack (class in sacroml.attacks.likelihood_attack)": [[2, "sacroml.attacks.likelihood_attack.LIRAAttack", false]], "load() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.load", false]], "load_array() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.load_array", false]], "load_model() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.load_model", false]], "load_own_variables() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.load_own_variables", false]], "load_safe_keras_model() (in module sacroml.safemodel.classifiers.safekeras)": [[17, "sacroml.safemodel.classifiers.safekeras.load_safe_keras_model", false]], "load_weights() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.load_weights", false]], "losses (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.losses", false]], "make_predict_function() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.make_predict_function", false]], "make_test_function() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.make_test_function", false]], "make_train_function() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.make_train_function", false]], "metrics (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.metrics", false]], "metrics_names (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.metrics_names", false]], "min_max_disc() (in module sacroml.metrics)": [[3, "sacroml.metrics.min_max_disc", false]], "model_load_file (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.model_load_file", false]], "model_load_file (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.model_load_file", false]], "model_save_file (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.model_save_file", false]], "model_save_file (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.model_save_file", false]], "model_type (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.model_type", false]], "model_type (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.model_type", false]], "module": [[0, "module-sacroml.attacks.attribute_attack", false], [2, "module-sacroml.attacks.likelihood_attack", false], [3, "module-sacroml.metrics", false], [5, "module-sacroml.attacks.report", false], [6, "module-sacroml.attacks.structural_attack", false], [7, "module-sacroml.attacks.target", false], [8, "module-sacroml.attacks.worst_case_attack", false], [12, "module-sacroml.preprocessing.loaders", false], [16, "module-sacroml.safemodel.classifiers.safedecisiontreeclassifier", false], [17, "module-sacroml.safemodel.classifiers.safekeras", false], [18, "module-sacroml.safemodel.safemodel", false], [19, "module-sacroml.safemodel.classifiers.saferandomforestclassifier", false], [20, "module-sacroml.safemodel.classifiers.safesvc", false]], "name (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.name", false]], "name_scope (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.name_scope", false]], "non_trainable_variables (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.non_trainable_variables", false]], "non_trainable_weights (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.non_trainable_weights", false]], "outbound_nodes (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.outbound_nodes", false]], "output (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.output", false]], "output_mask (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.output_mask", false]], "output_shape (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.output_shape", false]], "phi_hat() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.phi_hat", false]], "phi_hat_multi() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.phi_hat_multi", false]], "plot_categorical_fraction() (in module sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.plot_categorical_fraction", false]], "plot_categorical_risk() (in module sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.plot_categorical_risk", false]], "plot_quantitative_risk() (in module sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.plot_quantitative_risk", false]], "posthoc_check() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.posthoc_check", false]], "posthoc_check() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.posthoc_check", false]], "posthoc_check() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.posthoc_check", false]], "posthoc_check() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.posthoc_check", false]], "posthoc_check() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.posthoc_check", false]], "predict() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.predict", false]], "predict() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.predict", false]], "predict() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.predict", false]], "predict() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.predict", false]], "predict_generator() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.predict_generator", false]], "predict_log_proba() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.predict_log_proba", false]], "predict_log_proba() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.predict_log_proba", false]], "predict_on_batch() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.predict_on_batch", false]], "predict_proba() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.predict_proba", false]], "predict_proba() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.predict_proba", false]], "predict_proba() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.predict_proba", false]], "predict_step() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.predict_step", false]], "preliminary_check() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.preliminary_check", false]], "preliminary_check() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.preliminary_check", false]], "preliminary_check() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.preliminary_check", false]], "preliminary_check() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.preliminary_check", false]], "preliminary_check() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.preliminary_check", false]], "report_categorical() (in module sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.report_categorical", false]], "report_quantitative() (in module sacroml.attacks.attribute_attack)": [[0, "sacroml.attacks.attribute_attack.report_quantitative", false]], "request_release() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.request_release", false]], "request_release() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.request_release", false]], "request_release() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.request_release", false]], "request_release() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.request_release", false]], "request_release() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.request_release", false]], "researcher (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.researcher", false]], "researcher (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.researcher", false]], "reset_metrics() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.reset_metrics", false]], "reset_states() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.reset_states", false]], "run_attack() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.run_attack", false]], "run_attack() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.run_attack", false]], "run_attack() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.run_attack", false]], "run_attack() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.run_attack", false]], "run_attack() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.run_attack", false]], "run_attack_reps() (sacroml.attacks.worst_case_attack.worstcaseattack method)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack.run_attack_reps", false]], "run_eagerly (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.run_eagerly", false]], "sacroml.attacks.attribute_attack": [[0, "module-sacroml.attacks.attribute_attack", false]], "sacroml.attacks.likelihood_attack": [[2, "module-sacroml.attacks.likelihood_attack", false]], "sacroml.attacks.report": [[5, "module-sacroml.attacks.report", false]], "sacroml.attacks.structural_attack": [[6, "module-sacroml.attacks.structural_attack", false]], "sacroml.attacks.target": [[7, "module-sacroml.attacks.target", false]], "sacroml.attacks.worst_case_attack": [[8, "module-sacroml.attacks.worst_case_attack", false]], "sacroml.metrics": [[3, "module-sacroml.metrics", false]], "sacroml.preprocessing.loaders": [[12, "module-sacroml.preprocessing.loaders", false]], "sacroml.safemodel.classifiers.safedecisiontreeclassifier": [[16, "module-sacroml.safemodel.classifiers.safedecisiontreeclassifier", false]], "sacroml.safemodel.classifiers.safekeras": [[17, "module-sacroml.safemodel.classifiers.safekeras", false]], "sacroml.safemodel.classifiers.saferandomforestclassifier": [[19, "module-sacroml.safemodel.classifiers.saferandomforestclassifier", false]], "sacroml.safemodel.classifiers.safesvc": [[20, "module-sacroml.safemodel.classifiers.safesvc", false]], "sacroml.safemodel.safemodel": [[18, "module-sacroml.safemodel.safemodel", false]], "safedecisiontreeclassifier (class in sacroml.safemodel.classifiers.safedecisiontreeclassifier)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier", false]], "safekerasmodel (class in sacroml.safemodel.classifiers.safekeras)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel", false]], "safemodel (class in sacroml.safemodel.safemodel)": [[18, "sacroml.safemodel.safemodel.SafeModel", false]], "saferandomforestclassifier (class in sacroml.safemodel.classifiers.saferandomforestclassifier)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier", false]], "safesvc (class in sacroml.safemodel.classifiers.safesvc)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC", false]], "same_configs() (in module sacroml.safemodel.classifiers.safekeras)": [[17, "sacroml.safemodel.classifiers.safekeras.same_configs", false]], "same_weights() (in module sacroml.safemodel.classifiers.safekeras)": [[17, "sacroml.safemodel.classifiers.safekeras.same_weights", false]], "save() (sacroml.attacks.target.target method)": [[7, "sacroml.attacks.target.Target.save", false]], "save() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.save", false]], "save() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.save", false]], "save() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.save", false]], "save() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.save", false]], "save() (sacroml.safemodel.safemodel.safemodel method)": [[18, "sacroml.safemodel.safemodel.SafeModel.save", false]], "save_own_variables() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.save_own_variables", false]], "save_spec() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.save_spec", false]], "save_weights() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.save_weights", false]], "score() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.score", false]], "score() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.score", false]], "set_fit_request() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.set_fit_request", false]], "set_fit_request() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.set_fit_request", false]], "set_params() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.set_params", false]], "set_params() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.set_params", false]], "set_params() (sacroml.safemodel.classifiers.safesvc.safesvc method)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.set_params", false]], "set_score_request() (sacroml.safemodel.classifiers.safedecisiontreeclassifier.safedecisiontreeclassifier method)": [[16, "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier.set_score_request", false]], "set_score_request() (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier method)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.set_score_request", false]], "set_weights() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.set_weights", false]], "state_updates (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.state_updates", false]], "stateful (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.stateful", false]], "structuralattack (class in sacroml.attacks.structural_attack)": [[6, "sacroml.attacks.structural_attack.StructuralAttack", false]], "submodules (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.submodules", false]], "subtitle() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.subtitle", false]], "summary() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.summary", false]], "supports_masking (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.supports_masking", false]], "target (class in sacroml.attacks.target)": [[7, "sacroml.attacks.target.Target", false]], "test_on_batch() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.test_on_batch", false]], "test_step() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.test_step", false]], "timestamp (sacroml.safemodel.classifiers.saferandomforestclassifier.saferandomforestclassifier attribute)": [[19, "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier.timestamp", false]], "timestamp (sacroml.safemodel.classifiers.safesvc.safesvc attribute)": [[20, "sacroml.safemodel.classifiers.safesvc.SafeSVC.timestamp", false]], "title() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.title", false]], "to_json() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.to_json", false]], "to_yaml() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.to_yaml", false]], "train_on_batch() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.train_on_batch", false]], "train_step() (sacroml.safemodel.classifiers.safekeras.safekerasmodel method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.train_step", false]], "trainable (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.trainable", false]], "trainable_variables (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.trainable_variables", false]], "trainable_weights (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.trainable_weights", false]], "unknowndataset": [[12, "sacroml.preprocessing.loaders.UnknownDataset", false]], "updates (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.updates", false]], "variable_dtype (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.variable_dtype", false]], "variables (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.variables", false]], "weights (sacroml.safemodel.classifiers.safekeras.safekerasmodel property)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.weights", false]], "with_name_scope() (sacroml.safemodel.classifiers.safekeras.safekerasmodel class method)": [[17, "sacroml.safemodel.classifiers.safekeras.SafeKerasModel.with_name_scope", false]], "with_traceback() (sacroml.preprocessing.loaders.datanotavailable method)": [[12, "sacroml.preprocessing.loaders.DataNotAvailable.with_traceback", false]], "with_traceback() (sacroml.preprocessing.loaders.unknowndataset method)": [[12, "sacroml.preprocessing.loaders.UnknownDataset.with_traceback", false]], "worstcaseattack (class in sacroml.attacks.worst_case_attack)": [[8, "sacroml.attacks.worst_case_attack.WorstCaseAttack", false]], "write_json() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.write_json", false]], "write_pdf() (in module sacroml.attacks.report)": [[5, "sacroml.attacks.report.write_pdf", false]]}, "objects": {"sacroml": [[3, 0, 0, "-", "metrics"]], "sacroml.attacks": [[0, 0, 0, "-", "attribute_attack"], [2, 0, 0, "-", "likelihood_attack"], [5, 0, 0, "-", "report"], [6, 0, 0, "-", "structural_attack"], [7, 0, 0, "-", "target"], [8, 0, 0, "-", "worst_case_attack"]], "sacroml.attacks.attribute_attack": [[0, 1, 1, "", "AttributeAttack"], [0, 3, 1, "", "plot_categorical_fraction"], [0, 3, 1, "", "plot_categorical_risk"], [0, 3, 1, "", "plot_quantitative_risk"], [0, 3, 1, "", "report_categorical"], [0, 3, 1, "", "report_quantitative"]], "sacroml.attacks.attribute_attack.AttributeAttack": [[0, 2, 1, "", "__init__"], [0, 2, 1, "", "attack"], [0, 2, 1, "", "get_params"]], "sacroml.attacks.likelihood_attack": [[2, 1, 1, "", "LIRAAttack"]], "sacroml.attacks.likelihood_attack.LIRAAttack": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "attack"], [2, 2, 1, "", "get_params"]], "sacroml.attacks.report": [[5, 1, 1, "", "CustomJSONEncoder"], [5, 3, 1, "", "create_lr_report"], [5, 3, 1, "", "create_mia_report"], [5, 3, 1, "", "line"], [5, 3, 1, "", "subtitle"], [5, 3, 1, "", "title"], [5, 3, 1, "", "write_json"], [5, 3, 1, "", "write_pdf"]], "sacroml.attacks.report.CustomJSONEncoder": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "default"], [5, 2, 1, "", "encode"], [5, 4, 1, "", "item_separator"], [5, 2, 1, "", "iterencode"], [5, 4, 1, "", "key_separator"]], "sacroml.attacks.structural_attack": [[6, 1, 1, "", "StructuralAttack"], [6, 3, 1, "", "get_model_param_count"], [6, 3, 1, "", "get_tree_parameter_count"], [6, 3, 1, "", "get_unnecessary_risk"]], "sacroml.attacks.structural_attack.StructuralAttack": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "attack"], [6, 2, 1, "", "dt_get_equivalence_classes"], [6, 2, 1, "", "get_equivalence_classes"], [6, 2, 1, "", "get_params"]], "sacroml.attacks.target": [[7, 1, 1, "", "Target"]], "sacroml.attacks.target.Target": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "add_feature"], [7, 2, 1, "", "add_processed_data"], [7, 2, 1, "", "add_raw_data"], [7, 2, 1, "", "add_safemodel_results"], [7, 2, 1, "", "load"], [7, 2, 1, "", "load_array"], [7, 2, 1, "", "load_model"], [7, 2, 1, "", "save"]], "sacroml.attacks.worst_case_attack": [[8, 1, 1, "", "WorstCaseAttack"]], "sacroml.attacks.worst_case_attack.WorstCaseAttack": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "attack"], [8, 2, 1, "", "attack_from_preds"], [8, 2, 1, "", "generate_arrays"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "run_attack_reps"]], "sacroml.metrics": [[3, 3, 1, "", "auc_p_val"], [3, 3, 1, "", "get_metrics"], [3, 3, 1, "", "min_max_disc"]], "sacroml.preprocessing": [[12, 0, 0, "-", "loaders"]], "sacroml.preprocessing.loaders": [[12, 5, 1, "", "DataNotAvailable"], [12, 5, 1, "", "UnknownDataset"], [12, 3, 1, "", "get_data_sklearn"]], "sacroml.preprocessing.loaders.DataNotAvailable": [[12, 2, 1, "", "__init__"], [12, 4, 1, "", "args"], [12, 2, 1, "", "with_traceback"]], "sacroml.preprocessing.loaders.UnknownDataset": [[12, 2, 1, "", "__init__"], [12, 4, 1, "", "args"], [12, 2, 1, "", "with_traceback"]], "sacroml.safemodel": [[18, 0, 0, "-", "safemodel"]], "sacroml.safemodel.classifiers": [[16, 0, 0, "-", "safedecisiontreeclassifier"], [17, 0, 0, "-", "safekeras"], [19, 0, 0, "-", "saferandomforestclassifier"], [20, 0, 0, "-", "safesvc"]], "sacroml.safemodel.classifiers.safedecisiontreeclassifier": [[16, 1, 1, "", "SafeDecisionTreeClassifier"], [16, 3, 1, "", "decision_tree_internal_trees_are_equal"], [16, 3, 1, "", "decision_trees_are_equal"], [16, 3, 1, "", "get_tree_k_anonymity"]], "sacroml.safemodel.classifiers.safedecisiontreeclassifier.SafeDecisionTreeClassifier": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "additional_checks"], [16, 2, 1, "", "apply"], [16, 2, 1, "", "cost_complexity_pruning_path"], [16, 2, 1, "", "decision_path"], [16, 2, 1, "", "examine_seperate_items"], [16, 6, 1, "", "feature_importances_"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "get_current_and_saved_models"], [16, 2, 1, "", "get_depth"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_n_leaves"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "posthoc_check"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_log_proba"], [16, 2, 1, "", "predict_proba"], [16, 2, 1, "", "preliminary_check"], [16, 2, 1, "", "request_release"], [16, 2, 1, "", "run_attack"], [16, 2, 1, "", "save"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_score_request"]], "sacroml.safemodel.classifiers.safekeras": [[17, 1, 1, "", "SafeKerasModel"], [17, 3, 1, "", "check_checkpoint_equality"], [17, 3, 1, "", "check_dp_used"], [17, 3, 1, "", "check_optimizer_allowed"], [17, 3, 1, "", "check_optimizer_is_dp"], [17, 3, 1, "", "load_safe_keras_model"], [17, 3, 1, "", "same_configs"], [17, 3, 1, "", "same_weights"]], "sacroml.safemodel.classifiers.safekeras.SafeKerasModel": [[17, 2, 1, "", "__init__"], [17, 6, 1, "", "activity_regularizer"], [17, 2, 1, "", "add_loss"], [17, 2, 1, "", "add_metric"], [17, 2, 1, "", "add_update"], [17, 2, 1, "", "add_variable"], [17, 2, 1, "", "add_weight"], [17, 2, 1, "", "additional_checks"], [17, 2, 1, "", "build"], [17, 2, 1, "", "build_from_config"], [17, 2, 1, "", "call"], [17, 2, 1, "", "check_epsilon"], [17, 2, 1, "", "compile"], [17, 2, 1, "", "compile_from_config"], [17, 6, 1, "", "compute_dtype"], [17, 2, 1, "", "compute_loss"], [17, 2, 1, "", "compute_mask"], [17, 2, 1, "", "compute_metrics"], [17, 2, 1, "", "compute_output_shape"], [17, 2, 1, "", "compute_output_signature"], [17, 2, 1, "", "count_params"], [17, 6, 1, "", "distribute_reduction_method"], [17, 6, 1, "", "distribute_strategy"], [17, 2, 1, "", "dp_epsilon_met"], [17, 6, 1, "", "dtype"], [17, 6, 1, "", "dtype_policy"], [17, 6, 1, "", "dynamic"], [17, 6, 1, "", "enable_tune_steps_per_execution"], [17, 2, 1, "", "evaluate"], [17, 2, 1, "", "evaluate_generator"], [17, 2, 1, "", "examine_seperate_items"], [17, 2, 1, "", "export"], [17, 2, 1, "", "finalize_state"], [17, 2, 1, "", "fit"], [17, 2, 1, "", "fit_generator"], [17, 2, 1, "", "from_config"], [17, 2, 1, "", "get_build_config"], [17, 2, 1, "", "get_compile_config"], [17, 2, 1, "", "get_config"], [17, 2, 1, "", "get_current_and_saved_models"], [17, 2, 1, "", "get_input_at"], [17, 2, 1, "", "get_input_mask_at"], [17, 2, 1, "", "get_input_shape_at"], [17, 2, 1, "", "get_layer"], [17, 2, 1, "", "get_metrics_result"], [17, 2, 1, "", "get_output_at"], [17, 2, 1, "", "get_output_mask_at"], [17, 2, 1, "", "get_output_shape_at"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "get_weight_paths"], [17, 2, 1, "", "get_weights"], [17, 6, 1, "", "inbound_nodes"], [17, 6, 1, "", "input"], [17, 6, 1, "", "input_mask"], [17, 6, 1, "", "input_shape"], [17, 6, 1, "", "input_spec"], [17, 6, 1, "", "jit_compile"], [17, 6, 1, "", "layers"], [17, 2, 1, "", "load_own_variables"], [17, 2, 1, "", "load_weights"], [17, 6, 1, "", "losses"], [17, 2, 1, "", "make_predict_function"], [17, 2, 1, "", "make_test_function"], [17, 2, 1, "", "make_train_function"], [17, 6, 1, "", "metrics"], [17, 6, 1, "", "metrics_names"], [17, 6, 1, "", "name"], [17, 6, 1, "", "name_scope"], [17, 6, 1, "", "non_trainable_variables"], [17, 6, 1, "", "non_trainable_weights"], [17, 6, 1, "", "outbound_nodes"], [17, 6, 1, "", "output"], [17, 6, 1, "", "output_mask"], [17, 6, 1, "", "output_shape"], [17, 2, 1, "", "posthoc_check"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_generator"], [17, 2, 1, "", "predict_on_batch"], [17, 2, 1, "", "predict_step"], [17, 2, 1, "", "preliminary_check"], [17, 2, 1, "", "request_release"], [17, 2, 1, "", "reset_metrics"], [17, 2, 1, "", "reset_states"], [17, 2, 1, "", "run_attack"], [17, 6, 1, "", "run_eagerly"], [17, 2, 1, "", "save"], [17, 2, 1, "", "save_own_variables"], [17, 2, 1, "", "save_spec"], [17, 2, 1, "", "save_weights"], [17, 2, 1, "", "set_weights"], [17, 6, 1, "", "state_updates"], [17, 6, 1, "", "stateful"], [17, 6, 1, "", "submodules"], [17, 2, 1, "", "summary"], [17, 6, 1, "", "supports_masking"], [17, 2, 1, "", "test_on_batch"], [17, 2, 1, "", "test_step"], [17, 2, 1, "", "to_json"], [17, 2, 1, "", "to_yaml"], [17, 2, 1, "", "train_on_batch"], [17, 2, 1, "", "train_step"], [17, 6, 1, "", "trainable"], [17, 6, 1, "", "trainable_variables"], [17, 6, 1, "", "trainable_weights"], [17, 6, 1, "", "updates"], [17, 6, 1, "", "variable_dtype"], [17, 6, 1, "", "variables"], [17, 6, 1, "", "weights"], [17, 2, 1, "", "with_name_scope"]], "sacroml.safemodel.classifiers.saferandomforestclassifier": [[19, 1, 1, "", "SafeRandomForestClassifier"]], "sacroml.safemodel.classifiers.saferandomforestclassifier.SafeRandomForestClassifier": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "additional_checks"], [19, 2, 1, "", "apply"], [19, 2, 1, "", "decision_path"], [19, 6, 1, "", "estimators_samples_"], [19, 2, 1, "", "examine_seperate_items"], [19, 4, 1, "", "examine_seperately_items"], [19, 6, 1, "", "feature_importances_"], [19, 4, 1, "", "filename"], [19, 2, 1, "", "fit"], [19, 2, 1, "", "get_current_and_saved_models"], [19, 2, 1, "", "get_k_anonymity"], [19, 2, 1, "", "get_metadata_routing"], [19, 2, 1, "", "get_params"], [19, 4, 1, "", "ignore_items"], [19, 4, 1, "", "model_load_file"], [19, 4, 1, "", "model_save_file"], [19, 4, 1, "", "model_type"], [19, 2, 1, "", "posthoc_check"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "predict_log_proba"], [19, 2, 1, "", "predict_proba"], [19, 2, 1, "", "preliminary_check"], [19, 2, 1, "", "request_release"], [19, 4, 1, "", "researcher"], [19, 2, 1, "", "run_attack"], [19, 2, 1, "", "save"], [19, 2, 1, "", "score"], [19, 2, 1, "", "set_fit_request"], [19, 2, 1, "", "set_params"], [19, 2, 1, "", "set_score_request"], [19, 4, 1, "", "timestamp"]], "sacroml.safemodel.classifiers.safesvc": [[20, 1, 1, "", "SafeSVC"]], "sacroml.safemodel.classifiers.safesvc.SafeSVC": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "additional_checks"], [20, 2, 1, "", "examine_seperate_items"], [20, 4, 1, "", "examine_seperately_items"], [20, 4, 1, "", "filename"], [20, 2, 1, "", "fit"], [20, 2, 1, "", "get_current_and_saved_models"], [20, 2, 1, "", "get_params"], [20, 4, 1, "", "ignore_items"], [20, 2, 1, "", "k_hat_svm"], [20, 4, 1, "", "model_load_file"], [20, 4, 1, "", "model_save_file"], [20, 4, 1, "", "model_type"], [20, 2, 1, "", "phi_hat"], [20, 2, 1, "", "phi_hat_multi"], [20, 2, 1, "", "posthoc_check"], [20, 2, 1, "", "predict"], [20, 2, 1, "", "predict_proba"], [20, 2, 1, "", "preliminary_check"], [20, 2, 1, "", "request_release"], [20, 4, 1, "", "researcher"], [20, 2, 1, "", "run_attack"], [20, 2, 1, "", "save"], [20, 2, 1, "", "set_params"], [20, 4, 1, "", "timestamp"]], "sacroml.safemodel.safemodel": [[18, 1, 1, "", "SafeModel"], [18, 3, 1, "", "check_equal"], [18, 3, 1, "", "check_max"], [18, 3, 1, "", "check_min"], [18, 3, 1, "", "check_type"]], "sacroml.safemodel.safemodel.SafeModel": [[18, 4, 1, "", "__annotations__"], [18, 2, 1, "", "__apply_constraints"], [18, 2, 1, "", "__check_model_param"], [18, 2, 1, "", "__check_model_param_and"], [18, 2, 1, "", "__check_model_param_or"], [18, 4, 1, "", "__dict__"], [18, 2, 1, "", "__get_constraints"], [18, 2, 1, "", "__init__"], [18, 4, 1, "", "__module__"], [18, 2, 1, "", "__str__"], [18, 2, 1, "", "additional_checks"], [18, 2, 1, "", "examine_seperate_items"], [18, 2, 1, "", "get_current_and_saved_models"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "posthoc_check"], [18, 2, 1, "", "preliminary_check"], [18, 2, 1, "", "request_release"], [18, 2, 1, "", "run_attack"], [18, 2, 1, "", "save"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "exception", "Python exception"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:exception", "6": "py:property"}, "terms": {"": [6, 16, 17, 19], "0": [2, 3, 5, 6, 8, 12, 16, 17, 19, 20], "01604": 3, "03570": 2, "05": [2, 8], "1": [3, 4, 6, 8, 9, 10, 12, 16, 17, 18, 19, 20], "10": [5, 8, 17, 20], "100": [2, 3, 12], "1000": 20, "106": 3, "11": 5, "12": 5, "17": 16, "1709": 3, "18": [16, 19], "1d": 17, "2": [3, 8, 17], "20": [6, 17], "2112": 2, "24": 5, "2d": 17, "3": [0, 16, 17, 19], "30": 17, "32": 17, "3dp": 12, "4": [3, 17], "5": [3, 8, 10, 18], "500": 12, "6": 17, "7": 17, "70": 17, "8": 17, "90": 3, "A": [4, 13, 16, 17, 18, 19, 20], "AND": 18, "As": 17, "By": 17, "For": [2, 4, 5, 8, 14, 16, 17, 19], "If": [3, 5, 16, 17, 18, 19, 20], "In": [5, 14, 16, 17, 19], "It": [5, 8, 10, 14, 16, 17, 19], "NOT": 17, "OR": 18, "On": 17, "One": 8, "That": 19, "The": [2, 4, 5, 6, 7, 9, 10, 12, 16, 17, 18, 19, 20], "Then": [6, 14], "These": [12, 17, 18], "To": [0, 5, 6, 17], "_": 17, "__": [16, 19], "__annotations__": 18, "__apply_constraint": 18, "__call__": 17, "__check_model_param": 18, "__check_model_param_and": 18, "__check_model_param_or": 18, "__dict__": [14, 16, 17, 18, 19, 20], "__doc__": 18, "__get_constraint": 18, "__init__": [0, 2, 5, 6, 7, 8, 12, 16, 17, 18, 19, 20], "__module__": 18, "__str__": 18, "__traceback__": 12, "__weakref__": 18, "_one_shot": 5, "_safemodel__apply_constraint": 18, "_safemodel__check_model_param": 18, "_safemodel__check_model_param_and": 18, "_safemodel__check_model_param_or": 18, "_safemodel__get_constraint": 18, "_tree": 16, "a_out": 17, "ab": [12, 17], "abl": 17, "about": [7, 17], "abov": 17, "absolut": 17, "acc": [3, 17], "accept": 17, "access": [0, 4, 6, 9, 17], "accord": 6, "account": 17, "accumul": 17, "accuraci": [3, 6, 16, 17, 19], "across": [4, 5, 8, 17, 19], "activ": 17, "activity_regular": 17, "actual": [3, 8, 17], "ad": [12, 16, 17, 19], "adam": 17, "adapt": 17, "add": [7, 17], "add_featur": 7, "add_loss": 17, "add_metr": 17, "add_n": 17, "add_processed_data": 7, "add_raw_data": 7, "add_safemodel_result": 7, "add_upd": 17, "add_vari": 17, "add_weight": 17, "addit": [8, 17, 18], "additional_check": [16, 17, 18, 19, 20], "administr": 9, "adr": 9, "advantag": 3, "advis": 17, "ae": 12, "affect": 17, "after": [14, 17], "afterward": 17, "again": 17, "against": 3, "aggreg": 17, "agnost": 17, "ai": [3, 9], "aim": 10, "alarm": 3, "alia": [16, 17, 19], "all": [4, 5, 12, 17, 19], "allow": [10, 16, 17, 19], "allow_nan": 5, "alpha": 16, "alreadi": [5, 17], "also": [3, 9, 16, 17, 19], "altern": [16, 19], "although": 14, "alwai": 17, "amongst": 3, "an": [0, 2, 3, 5, 6, 8, 10, 14, 16, 17, 19, 20], "analyt": 9, "andi": 10, "ani": [5, 7, 16, 17, 18], "announc": 17, "anonym": [16, 19], "anoth": 17, "api": 17, "api_doc": 17, "appear": 19, "append": 5, "appetit": 6, "appli": [4, 6, 14, 16, 17, 18, 19, 20], "applic": 17, "apply_constraint": [14, 16, 17, 18, 19, 20], "appropri": [16, 17, 18, 19, 20], "approxim": 3, "ar": [0, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 17, 18, 19, 20], "architectur": 17, "aren": 17, "arg": [12, 17], "arg_spec": 17, "argument": 17, "arial": 5, "around": 17, "arr_path": 7, "arrai": [3, 5, 7, 8, 16, 17, 19], "array_equ": 14, "artifact": 17, "arxiv": [2, 3], "ascii": 5, "ask": 12, "assert": [3, 17], "assess": [3, 6], "assign": 17, "associ": [7, 17], "assum": 17, "assumpt": 17, "attach": 17, "attack": [3, 5, 7, 9, 16, 17, 18, 19, 20], "attack_experiment_logg": [4, 5], "attack_from_pr": 8, "attack_instance_logg": [4, 5], "attack_model": 8, "attack_model_param": 8, "attack_nam": [4, 16, 17, 18, 19, 20], "attack_output": 5, "attack_param": 4, "attempt": [5, 17], "attent": 17, "attribut": [1, 9, 16, 17, 18, 19, 20], "attribute_attack": 0, "attributeattack": 0, "attributeerror": 17, "auc": [3, 4, 6], "auc_p": 3, "auc_p_val": 3, "auc_p_valu": [2, 8], "auc_sig": 4, "auc_std": 3, "auto": 17, "automat": [5, 9, 12, 14, 17], "avail": [5, 12, 16, 17, 19, 20], "averag": [3, 17], "b": [5, 8, 17], "b_out": 17, "back": [16, 17, 18, 19, 20], "backpropag": 17, "backward": 17, "bag": 19, "bar": [0, 5, 17], "base": [5, 6, 7, 8, 9, 14, 15, 16, 17, 19], "base_estim": 14, "base_estimator_": 14, "baseestim": [6, 7], "baselin": [4, 8], "baseline_global_metr": 4, "basemodel_paramnam": 14, "basi": 5, "basic": [14, 17], "batch": 17, "batch_siz": 17, "batchnorm": 17, "baz": 5, "becaus": 17, "becom": 17, "been": [4, 9, 16, 17, 18, 19, 20], "befor": 17, "behav": 17, "behavior": [5, 17], "behaviour": 3, "being": [14, 17], "below": [6, 17], "benefit": 13, "best": [6, 17], "beta": 8, "better": 6, "between": [3, 12, 16, 17], "bfloat16": 17, "bia": 17, "bias": 17, "bigobject": 5, "binari": 3, "binomi": 3, "block": 5, "bool": [0, 2, 3, 6, 8, 14, 16, 17, 18, 19, 20], "boolean": [16, 17, 18, 19, 20], "bootstrap": 14, "border": 5, "both": [16, 17, 18, 19, 20], "bottom": 17, "box": [6, 12], "br": 12, "breadth": 17, "brought": [16, 19], "build": 17, "build_from_config": 17, "built": 17, "bunch": 16, "by_nam": 17, "bypass": 16, "c": [17, 20], "cach": 17, "caching_devic": 17, "calcul": [3, 17, 19], "call": [5, 10, 14, 16, 17, 18, 19, 20], "callabl": 17, "callback": 17, "callbacklist": 17, "caller": 17, "can": [1, 5, 8, 12, 14, 16, 17, 19], "candid": 17, "cannot": [3, 17, 18], "capabl": 17, "captur": 17, "cardin": [16, 19], "care": 14, "carlini": 2, "carri": 16, "case": [1, 3, 5, 9, 16, 17, 18, 19, 20], "cast": 17, "categor": 0, "categorical_crossentropi": 17, "caus": [5, 17], "ccp_alpha": [14, 16], "ccp_path": 16, "cd": 14, "certain": 17, "chanc": 3, "chang": [14, 16, 17, 18, 19], "charact": 5, "chart": 0, "check": [5, 6, 7, 9, 16, 17, 18, 19, 20], "check_checkpoint_equ": 17, "check_circular": 5, "check_dp_us": 17, "check_epsilon": 17, "check_equ": 18, "check_input": 16, "check_max": 18, "check_min": 18, "check_optimizer_allow": 17, "check_optimizer_is_dp": 17, "check_typ": 18, "checker": [16, 17, 18, 19, 20], "checkfil": 10, "checkpoint": 17, "checkpointopt": 17, "child": 16, "children": 17, "choic": 3, "choos": 17, "chosen": 17, "chunk": 5, "circular": 5, "class": [0, 2, 5, 6, 7, 8, 9, 15, 16, 17, 19, 20], "class_weight": [14, 17], "classes_": [16, 19], "classif": [16, 19], "classifi": [3, 16, 17, 19, 20], "classmethod": 17, "clear": 17, "code": [0, 1, 5, 6, 14, 17], "collect": 17, "column": [8, 12, 19], "com": 3, "combin": [6, 8], "combint": 6, "comment": 14, "common": [10, 14], "compact": 5, "compar": [5, 16, 17, 18], "comparison": 18, "compat": 17, "compil": 17, "compile_from_config": 17, "compiled_metr": 17, "complex": [16, 18], "compliant": [5, 10, 17], "compon": [4, 16, 19], "compos": 17, "comput": [3, 4, 8, 16, 17, 19, 20], "compute_dtyp": 17, "compute_loss": 17, "compute_mask": 17, "compute_metr": 17, "compute_output_shap": 17, "compute_output_signatur": 17, "concret": 17, "confid": [3, 10], "config": 17, "configur": 17, "connect": 17, "consid": [3, 17], "consist": [5, 17, 19], "constant": 17, "constant_initi": 17, "constraint": [14, 16, 17, 18, 19, 20], "construct": [0, 2, 6, 8, 17], "constructor": [5, 17, 18], "contain": [0, 5, 7, 12, 14, 16, 17, 18, 19, 20], "content": [5, 14, 17, 18], "continu": [12, 17], "control": [8, 10, 17], "conv2d": 17, "convert": [3, 5, 16, 19], "convert_to_tensor": 17, "cope": 5, "copi": [16, 17, 18, 19, 20], "corefunction": 14, "correct": [4, 8], "correctli": [16, 19], "correspond": [3, 16, 17, 19], "cost": 16, "cost_complexity_pruning_path": 16, "could": 17, "count": 17, "count_param": 17, "cp": 14, "cpu": 0, "creat": [4, 5, 6, 14, 16, 17, 18, 19, 20], "create_lr_report": 5, "create_mia_report": 5, "criteria": 16, "criterion": [14, 16, 19], "csc_matrix": 16, "csr": [16, 19], "csr_matrix": [16, 19], "cur_val": 18, "curr_separ": [16, 17, 18, 19, 20], "curr_val": [16, 17, 18, 19, 20], "current": [6, 16, 17, 18, 19, 20], "custom": [5, 17], "custom_metr": 17, "custom_metric_nam": 17, "custom_object": 17, "customizing_what_happens_in_fit": 17, "customjsonencod": 5, "d": 17, "d1": 17, "d2": 17, "dai": 5, "dare": 9, "data": [3, 5, 7, 8, 9, 12, 16, 17, 19], "data_fold": 12, "datafram": 12, "datanotavail": 12, "datapoint": [16, 19], "dataset": [0, 7, 12, 16, 17, 18, 19, 20], "dataset_nam": [7, 12], "datastructur": [14, 18], "deal": [16, 17, 18, 19, 20], "debug": 17, "decis": [6, 13, 14, 16, 19], "decision_path": [16, 19], "decision_tree_internal_trees_are_equ": 16, "decision_trees_are_equ": 16, "decisiontreeclassifi": [6, 10, 16], "declar": 17, "decod": 5, "decor": 17, "deep": [16, 17, 18, 19, 20], "deepcopi": 14, "def": [14, 17], "default": [3, 5, 6, 8, 16, 17, 18, 19], "defin": [7, 16, 17, 18, 19, 20], "definit": 3, "deleg": 17, "delet": 10, "deliber": [16, 17, 18, 19, 20], "deliv": [9, 17], "dens": 17, "depend": [14, 17], "deprec": 17, "depth": 16, "descent": 17, "describ": [7, 17, 18], "descript": [7, 17, 18], "design": [6, 10, 17], "dest": 5, "detail": [6, 10, 13, 16, 17], "determin": [2, 8, 16, 17, 18, 19, 20], "develop": 17, "deviat": [2, 3, 4], "dhat": 20, "dict": [0, 2, 3, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20], "dictionari": [0, 3, 5, 7, 8, 16, 17, 18, 19, 20], "differ": [3, 6, 8, 14, 17], "differenti": [17, 20], "dim": 14, "dimens": [14, 17], "directli": [17, 18], "directori": [0, 2, 6, 8, 14, 16, 17, 18, 19, 20], "disabl": 17, "disclos": [16, 17, 18, 19, 20], "disclosur": [7, 10, 18], "discoveri": 3, "discuss": 17, "displai": 17, "distanc": 16, "distribut": [8, 17], "distribute_reduction_method": 17, "distribute_strategi": 17, "distributionstrategi": 17, "diustribut": 3, "do": [8, 10, 12, 14, 16, 17], "doc": 14, "document": [5, 17], "doe": 17, "doesn": 17, "don": [12, 16, 17], "done": 17, "door": [16, 17, 18, 19, 20], "download": 12, "downstream": 17, "dp": 17, "dp_epsilon_met": 17, "drawn": 19, "dropout": 17, "dt_get_equivalence_class": 6, "dtensor": 17, "dtree": 6, "dtype": [16, 17, 19], "dtype_polici": 17, "dummi": [4, 5, 8], "dummy_attack_experiment_logg": 5, "dummy_attack_experiments_logg": 4, "dummy_attack_metrics_experiment_0": 4, "dummy_attack_metrics_experiment_1": 4, "dummy_attack_metrics_experiment_n": 4, "dump": 17, "dure": [5, 16, 17], "dynam": [17, 19], "dynamic_batch": 17, "e": [4, 6, 7, 14, 16, 17, 18, 19, 20], "each": [2, 4, 5, 8, 16, 17, 19], "eager": 17, "eagerli": 17, "easier": 17, "easili": 17, "edit": 14, "effect": [16, 19], "either": [16, 17], "element": [5, 16, 17, 19], "elimin": 5, "emploi": 17, "empti": 17, "enabl": 17, "enable_metadata_rout": [16, 19], "enable_tune_steps_per_execut": 17, "encapsul": [16, 19], "encod": [5, 6, 7, 17], "end": [16, 17, 19], "endpoint": 17, "ensembl": [8, 19], "ensur": [5, 14], "ensure_ascii": 5, "enter": 17, "entir": 17, "entri": [4, 17], "environ": [9, 10, 17], "ep": 20, "epoch": 17, "epsilon": 17, "epsrc": 9, "equal": [16, 18], "equival": [6, 17], "error": [10, 16, 17, 19], "escap": 5, "essenti": 3, "estim": [16, 19], "estimators_": 14, "estimators_samples_": 19, "etc": [5, 8, 16, 17], "eter": 10, "evalu": 17, "evaluate_gener": 17, "even": 17, "everi": [17, 19], "exact": 17, "exactli": 17, "examin": 18, "examine_separ": [17, 18], "examine_separately_item": 18, "examine_seperate_item": [16, 17, 18, 19, 20], "examine_seperately_item": [14, 18, 19, 20], "exampl": [1, 3, 4, 5, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20], "except": 12, "exclud": [16, 17, 18, 19, 20], "execut": [0, 2, 6, 8, 17], "exhaust": 17, "exist": [5, 14, 16, 17, 18, 19, 20], "expand": 17, "expand_nest": 17, "expect": [16, 17, 18, 19, 20], "experi": [4, 5, 8], "experiment": 6, "experimental_autocast": 17, "explicit": 17, "explicitli": 17, "explor": 13, "export": 17, "exportarch": 17, "ext": [7, 16, 17, 18, 19, 20], "extend": [9, 15], "extens": [7, 14, 16, 17, 18, 19, 20], "extra": 17, "extract": [6, 14], "f": 14, "f1": 3, "fact": 17, "fall": 17, "fals": [2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20], "faq": 17, "far": 3, "faster": 17, "featur": [7, 8, 12, 16, 19, 20], "feature_importances_": [16, 19], "feedback": [10, 17], "fetch": 19, "file": [6, 7, 16, 17, 18, 19, 20], "filenam": [7, 18, 19, 20], "filepath": 17, "final": 17, "finalize_st": 17, "find": 17, "fine": 17, "finish": 17, "first": [8, 17], "fit": [7, 10, 16, 17, 18, 19, 20], "fit_gener": 17, "fix": [16, 17, 18, 19, 20], "fix_vari": 2, "flag": 3, "flat": 17, "float": [2, 3, 5, 8, 16, 17, 19, 20], "float16": 17, "float32": [16, 17, 19], "fly": 17, "fnr": 3, "folder": [1, 7, 12], "follow": [3, 4, 5, 12, 16, 17], "font": 5, "font_siz": 5, "font_styl": 5, "foo": 5, "footprint": 19, "forc": 17, "forest": 19, "form": [16, 17, 18, 19, 20], "format": [7, 12, 14, 16, 17, 18, 19, 20], "forward": 17, "found": [1, 14, 17], "fpdf": 5, "fpr": [3, 4], "fraction": [0, 16, 19], "framework": 17, "free": 17, "frequenc": 3, "fresh": 17, "from": [2, 4, 5, 6, 7, 8, 9, 14, 17, 18, 19], "from_config": 17, "from_tensor_slic": 17, "frozen": 17, "full": 17, "function": [5, 17, 18], "g": [7, 14, 16, 17, 18, 19, 20], "gamma": 20, "gap": 16, "gaussian": 3, "gener": [0, 2, 5, 6, 8, 17, 19], "generate_arrai": 8, "get": [0, 2, 5, 6, 8, 12, 16, 17, 18, 19, 20], "get_build_config": 17, "get_compile_config": 17, "get_concrete_funct": 17, "get_config": 17, "get_current_and_saved_model": [16, 17, 18, 19, 20], "get_data_sklearn": 12, "get_depth": 16, "get_equivalence_class": 6, "get_input_at": 17, "get_input_mask_at": 17, "get_input_shape_at": 17, "get_k_anonym": [14, 19], "get_lay": 17, "get_metadata_rout": [16, 19], "get_metr": 3, "get_metrics_result": 17, "get_model_param_count": 6, "get_n_leav": 16, "get_output_at": 17, "get_output_mask_at": 17, "get_output_shape_at": 17, "get_param": [0, 2, 6, 8, 16, 17, 18, 19, 20], "get_tree_k_anonym": 16, "get_tree_parameter_count": 6, "get_unnecessary_risk": 6, "get_weight": [14, 17], "get_weight_path": 17, "getter": 17, "getting_start": 17, "gini": [16, 19], "github": 3, "give": [10, 17, 19], "given": [3, 4, 5, 16, 17, 18, 19], "global": [2, 4, 17], "global_metr": 4, "go": 17, "goe": [16, 19], "gradient": 17, "gradientboostingclassifi": 14, "gradienttap": 17, "graimatt": 9, "grant": 9, "graph": 17, "greater": [10, 17], "greedili": 17, "grid": 6, "group": 17, "guarante": [5, 17], "guid": [13, 16, 17, 19], "guidelin": 9, "h5": 17, "h5py": 17, "ha": [0, 4, 6, 7, 9, 10, 12, 16, 17, 18, 19, 20], "handl": [14, 17], "handler": 12, "happen": 17, "harmon": 3, "harsh": [16, 19], "hasattr": 17, "have": [4, 5, 6, 8, 12, 14, 16, 17, 18, 19], "haven": 17, "hdf5": 17, "hdr": 9, "health": 9, "help": 14, "helpfunct": 14, "henc": 17, "here": [16, 17, 19, 20], "high": [3, 6, 16, 19], "higher": [17, 19], "highest": [3, 8, 19], "highli": 6, "hold": 8, "home": 12, "horizont": 17, "hospit": 12, "hot": [6, 17], "how": [1, 16, 17, 19], "http": [2, 3, 17], "hyper": 6, "hyperparamet": [6, 8], "hypothesi": 3, "i": [0, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20], "iaccd": 12, "id": [4, 18], "identifi": [4, 10, 16, 17, 18, 19, 20], "ignor": [16, 17, 18, 19], "ignore_item": [18, 19, 20], "ii": [6, 17], "iia": 17, "iii": 17, "implement": [3, 7, 10, 13, 14, 17], "import": [5, 16, 19], "importerror": 17, "impur": [16, 19], "inbound": 17, "inbound_nod": 17, "includ": [3, 17], "include_model_correct_featur": 8, "inclus": [8, 17], "incom": [5, 17], "incompat": 17, "incorrect": 3, "incorrectli": 3, "increas": [16, 17, 18, 19, 20], "indent": 5, "independ": 3, "index": [9, 14, 16, 17, 19], "indian": 12, "indic": [7, 16, 17, 18, 19, 20], "individu": [2, 3, 17], "infer": [0, 5, 6, 16, 17, 18, 19, 20], "infin": 5, "infinit": 5, "inform": [7, 16, 17, 18, 19, 20], "inherit": [14, 17], "init": 17, "initi": 17, "initial_epoch": 17, "initialis": 20, "inner": 17, "innov": 9, "input": [7, 12, 16, 17, 19, 20], "input_data": 17, "input_featur": 20, "input_mask": 17, "input_shap": 17, "input_signatur": 17, "input_spec": 17, "input_vector": 20, "inputspec": 17, "insert": [5, 17], "insid": [16, 17, 19], "inspect": [6, 16, 19], "instanc": [2, 4, 8, 16, 17, 19], "instance_0": 4, "instance_1": 4, "instance_n": 4, "instanti": 17, "instead": [16, 17, 19], "int": [0, 2, 3, 5, 6, 7, 8, 16, 17, 19, 20], "integ": [5, 8, 16, 17], "intend": 17, "interact": 17, "interf": [16, 18, 19, 20], "interfac": 7, "intern": [16, 17, 19], "interpret": 17, "introduct": 9, "invalid": 17, "invers": 17, "io": 17, "ion": 10, "iri": 12, "isn": 17, "issu": [3, 17], "item": [5, 16, 17, 18, 19, 20], "item_separ": 5, "iter": [4, 8, 17], "iterencod": 5, "its": [17, 19], "iv": 17, "javascript": [5, 14], "jit_compil": 17, "json": [0, 1, 2, 5, 6, 8, 9, 10, 16, 17, 18, 19, 20], "json_str": 17, "jsonencod": 5, "just": [14, 17, 18], "k": [16, 19], "k_anonym": 14, "k_hat_svm": 20, "keep": 17, "kei": [4, 5, 14, 17, 18], "kera": [17, 18], "kernel": 17, "kernel_initi": 17, "key_separ": 5, "keyword": 17, "know": [16, 17], "known": [3, 16, 17, 19], "known_issu": 17, "kwarg": [12, 14, 16, 17, 19, 20], "kwarg_spec": 17, "l": 17, "label": [3, 12, 16, 17, 19], "lambda": 17, "larg": 17, "last": [16, 17, 18, 19, 20], "later": 17, "latter": [16, 19], "layer": [14, 17], "layer_a": 17, "layer_b": 17, "layer_nam": 17, "layer_rang": 17, "leaf": [16, 19], "learn": [6, 10, 14, 17, 18], "least": 6, "leav": 16, "led": 6, "left": 17, "len": [14, 17], "length": [8, 17], "less": [10, 18], "let": 17, "level": [5, 16, 17, 18, 19, 20], "lightweight": 17, "like": [6, 16, 17, 19], "likelihood": 2, "likelihood_attack": 2, "limit": [14, 17], "line": [5, 17], "line_length": 17, "link": [4, 14], "lira": [1, 5, 9], "liraattack": 2, "list": [5, 7, 8, 14, 16, 17, 18, 19, 20], "liver": 12, "load": [7, 12, 17], "load_arrai": 7, "load_model": [7, 17], "load_own_vari": 17, "load_safe_keras_model": 17, "load_weight": 17, "loader": [9, 11], "local": 12, "locat": 17, "log": [3, 4, 16, 17, 18, 19], "log2": 6, "log_id": 4, "log_p": 3, "log_tim": 4, "logger": 4, "logic": [17, 18], "logp": 3, "long": 17, "longer": 17, "look": 17, "lookup": 17, "loop": 17, "loss": 17, "loss_track": 17, "low": 3, "lower": [6, 17], "lowest": 3, "m": 17, "m1": [14, 17], "m1d": 14, "m1layer": 14, "m2": [14, 17], "m2d": 14, "m2layer": 14, "machin": [10, 14, 17, 18], "made": 8, "mae": 17, "mai": [3, 10, 14, 17, 18, 19], "main": [2, 14], "maintain": 4, "make": [5, 14, 17, 18], "make_predict_funct": 17, "make_test_funct": 17, "make_train_funct": 17, "man": 14, "mani": [16, 19], "manual": 17, "map": [0, 2, 6, 8, 17], "mappingproxi": 18, "mask": 17, "masking_and_pad": 17, "match": [14, 17], "math": 17, "math_op": 17, "mathemat": 17, "matmul": 17, "matrix": [16, 17, 19, 20], "max_depth": [14, 16], "max_featur": [6, 14], "max_leaf_nod": 14, "max_queue_s": 17, "max_sampl": 14, "maxd": 3, "maximum": [16, 17, 18], "mc_pc_21033": 9, "mc_pc_23006": 9, "mean": [3, 4, 12, 16, 17, 19], "meant": 17, "mechan": [16, 19], "medic": 12, "meet": 17, "member": [3, 5, 19], "membership": [3, 5, 6], "memori": 19, "messag": [16, 17, 18, 19, 20], "meta": [16, 19], "metadata": [4, 5, 16, 17, 18, 19, 20], "metadata_rout": [16, 19], "metadatarequest": [16, 19], "meter": 10, "method": [0, 2, 3, 5, 6, 7, 8, 10, 16, 17, 18, 19, 20], "metric": [1, 2, 4, 5, 8, 9, 16, 17, 19], "metric_1": 17, "metric_2": 17, "metric_result": 17, "metrics_nam": 17, "mia": [3, 6, 16, 17, 18, 19, 20], "mia_metr": 8, "might": 17, "migrat": 17, "mimic2": 12, "min": [10, 18], "min_impurity_decreas": 14, "min_max_desc": 3, "min_max_disc": 3, "min_sample_split": 8, "min_samples_leaf": [8, 10, 14, 18], "min_samples_split": 14, "min_weight_fraction_leaf": 14, "mind": 3, "minim": 16, "minimal_cost_complexity_prun": 16, "minimum": [18, 19], "minmax": 12, "mislead": [16, 19], "mismatch": 17, "mix": 17, "mixed_precis": 17, "ml": [3, 12, 14], "mmd": 3, "mnist": 12, "mod": 17, "mode": [2, 17], "model": [0, 2, 4, 6, 7, 8, 9, 10, 14, 16, 17, 18, 19, 20], "model_from_json": 17, "model_from_yaml": 17, "model_load_fil": [18, 19, 20], "model_path": 7, "model_save_fil": [10, 14, 18, 19, 20], "model_typ": [10, 14, 18, 19, 20], "modeltomakesaf": 14, "modifi": 17, "modul": [9, 17], "monoton": 3, "more": [10, 14, 17, 18, 19], "mortal": 12, "most": [5, 6, 17], "move": 17, "mr": 9, "mrc": 9, "mse": 17, "msg": [16, 17, 18, 19, 20], "multi": [16, 19], "multipl": 17, "multiprocess": 17, "must": [10, 14, 17], "my": 17, "my_input": 17, "my_metric_lay": 17, "my_modul": 17, "mylay": 17, "mymetriclay": 17, "mymodel": 17, "mymodul": 17, "mysocket": 5, "n": [4, 10, 18], "n_class": [16, 19], "n_cpu": 0, "n_dummy_rep": [4, 8], "n_estim": [14, 19], "n_featur": [16, 19], "n_job": 14, "n_leav": 16, "n_neg": 3, "n_neg_test_exampl": 4, "n_node": [16, 19], "n_nodes_ptr": 19, "n_output": [16, 19], "n_po": 3, "n_pos_test_exampl": 4, "n_rep": [4, 8], "n_row": 8, "n_rows_in": 8, "n_rows_out": 8, "n_sampl": [16, 19], "n_shadow_model": 2, "n_sig_auc_p_v": 4, "n_sig_auc_p_vals_correct": 4, "n_sig_pdif_v": 4, "n_sig_pdif_vals_correct": 4, "name": [0, 2, 4, 6, 7, 8, 12, 16, 17, 18, 19, 20], "name_scop": 17, "nan": 5, "ndarrai": [3, 5, 7, 8, 14, 16, 19, 20], "ndim": 17, "neag": 3, "necessari": 17, "necessarili": 17, "need": [14, 17], "neg": [3, 5, 16], "nest": [12, 16, 17, 19], "net": [16, 17], "network": [14, 17], "neural": 14, "never": [17, 19], "new": [14, 17], "new_model_templ": 14, "newli": [14, 17], "newlin": 5, "nice": 17, "node": [6, 16, 17, 19], "node_count": 16, "node_index": 17, "nois": 17, "noisi": 3, "non": [3, 5, 16, 17, 19], "non_trainable_vari": 17, "non_trainable_weight": 17, "none": [0, 2, 5, 6, 7, 8, 14, 16, 17, 18, 19, 20], "nor": 17, "normal": [16, 17, 19], "normalis": 12, "notat": 14, "note": [3, 12, 16, 17, 18, 19, 20], "notebook": [16, 17, 19, 20], "notimplementederror": 17, "now": 17, "np": [3, 5, 7, 8, 14, 16, 17, 19], "npv": 3, "null": [3, 16, 17, 18, 19, 20], "null_auc_3sd_rang": 4, "num_exampl": 17, "num_sampl": 17, "number": [0, 2, 3, 4, 6, 8, 9, 14, 16, 17], "numer": 17, "numlay": 14, "numpi": [5, 17], "numpydoc": 14, "nurseri": 12, "o": 5, "object": [0, 2, 3, 5, 6, 8, 14, 16, 17, 18, 19, 20], "observ": [3, 4], "obtain": 17, "offer": 17, "offlin": 2, "often": 17, "on_read": 17, "on_test_batch_end": 17, "on_train_batch_end": 17, "one": [4, 6, 8, 14, 17, 19], "ones": 17, "onli": [4, 5, 16, 17, 18, 19], "onlin": 2, "oob_scor": 14, "op": 17, "open": [10, 14], "oper": [17, 18], "opt": 17, "optim": [16, 17, 18, 19, 20], "optimis": 17, "option": [7, 16, 17, 18, 19, 20], "order": [6, 16, 17, 19], "org": [2, 3, 17], "origin": [7, 16, 17, 19], "other": [14, 16, 17, 19], "otherwis": [5, 6, 16, 17, 19], "our": 17, "out": [8, 12, 17], "out_1_acc": 17, "out_1_loss": 17, "out_1_ma": 17, "out_acc": 17, "out_loss": 17, "out_ma": 17, "outbound_nod": 17, "output": [0, 1, 2, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20], "output_1": 17, "output_2": 17, "output_dir": [0, 2, 6, 8, 16, 17, 18, 19, 20], "output_mask": 17, "output_shap": 17, "outputs_safemodel": [16, 17, 18, 19, 20], "over": 17, "overload": [16, 18, 19, 20], "overrid": 17, "overridden": 17, "overwrit": 17, "own": 17, "p": [3, 4, 19], "p_thresh": [2, 4, 8], "p_valu": 4, "packag": [10, 14], "page": [9, 14], "pai": 17, "pair": 17, "panda": 12, "para": 10, "param": [0, 2, 6, 8, 10, 14, 16, 17, 19, 20], "paramet": [0, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20], "parameterserverstrategi": 17, "parseabl": 10, "part": [9, 17], "partial": 17, "particularli": 17, "partnership": 9, "pass": [12, 16, 17, 19], "path": [0, 6, 7, 16, 17, 18, 19, 20], "pathlib": 17, "pathlik": 17, "pattern": 17, "pd": 12, "pdf": [0, 2, 3, 5, 6, 8, 16, 17, 18, 19, 20], "pdf_report": 5, "pdif": 4, "pdif_sig": 4, "pdif_val": [2, 8], "pearamet": 14, "per": [2, 8, 17], "perform": [12, 17, 18, 19], "permut": 3, "permutation_import": [16, 19], "permute_row": 3, "persist": 7, "phase": 9, "phi_hat": 20, "phi_hat_multi": 20, "pickleabl": 17, "pictur": 9, "pipelin": [16, 19], "pkl": [7, 10, 16, 17, 18, 19, 20], "place": 5, "placehold": [17, 18], "pleas": [16, 17, 19], "plot": 0, "plot_categorical_fract": 0, "plot_categorical_risk": 0, "plot_quantitative_risk": 0, "polici": 17, "pose": 17, "posit": [3, 4, 17], "possibl": [4, 16, 17, 18, 19, 20], "possibli": 16, "posthoc": [17, 18], "posthoc_check": [16, 17, 18, 19, 20], "postprocess": 17, "potenti": [16, 17, 18, 19, 20], "ppv": 3, "preced": 17, "precis": [3, 17], "pred": 8, "pred_prob": 3, "predic": 17, "predict": [3, 6, 7, 8, 16, 17, 19, 20], "predict_gener": 17, "predict_log_proba": [16, 19], "predict_on_batch": 17, "predict_proba": [7, 16, 19, 20], "predict_step": 17, "prefer": 17, "prefix": [12, 17], "preliminary_check": [14, 16, 17, 18, 19, 20], "preprocess": [9, 12], "present": [4, 10, 18], "preserv": 17, "pretti": 5, "prevent": [5, 16, 17, 18, 19, 20], "print": [5, 14, 17], "print_fn": 17, "privaci": [3, 14, 16, 17, 18, 19, 20], "privat": 20, "proba": 16, "proba_test": [7, 8], "proba_train": [7, 8], "probabl": [3, 6, 7, 8, 16, 19, 20], "process": [7, 16, 17], "produc": 17, "product": 17, "programm": 9, "progress": 17, "project": [9, 20], "prompt": 17, "propag": 17, "proper": 17, "properli": 17, "properti": [6, 16, 17, 19], "proport": [3, 8], "protect": [14, 16, 17, 18, 19, 20], "prototyp": 18, "provid": [10, 16, 17, 19], "prune": 16, "pull": 12, "pval": 3, "py": 14, "python": [5, 16, 17, 19, 20], "quantit": 0, "quantiz": 17, "queue": 17, "r": [16, 19], "rais": [5, 12, 16, 17, 19], "rand": 3, "randint": 17, "random": [3, 4, 6, 17, 19], "random_st": 14, "randomforestclassifi": 8, "rang": [4, 14, 17, 18], "rank": [6, 17], "rate": [3, 4], "rather": 17, "re": [0, 16, 17, 19], "read": [6, 17, 18], "real": 17, "reappli": 17, "reason": [10, 17], "recal": 3, "receiv": 17, "recognis": [6, 12], "recommend": [10, 17, 18], "recommendat": 10, "record": [2, 17, 19], "recurs": [5, 17], "recursionerror": 5, "reduc": [17, 19], "reduce_mean": 17, "reduce_per_replica": 17, "reduce_sum": 17, "reduct": [16, 17, 19], "refer": [5, 17], "referenc": 17, "refine_epsilon": 17, "reflect": [14, 17], "regener": 17, "regex": 17, "regist": 17, "regress": [5, 6, 16], "regular": 17, "reinstanti": 17, "rel": 17, "relat": 4, "releas": 10, "relev": [16, 18, 19], "reli": 17, "reload": 17, "reloaded_artifact": 17, "remain": 3, "remov": 17, "render": 14, "rep": 8, "repeat": 17, "repetit": [4, 8], "replac": 17, "replica": 17, "report": [0, 1, 2, 6, 8, 9, 10, 16, 17, 18, 19, 20], "report_categor": 0, "report_dest": 5, "report_individu": 2, "report_quantit": 0, "repres": [4, 17], "represent": 5, "reproduc": 8, "reproduce_split": 8, "request": [16, 19], "request_releas": [16, 17, 18, 19, 20], "requir": [12, 14, 16, 17, 19], "research": [9, 10, 18, 19, 20], "reset": 17, "reset_metr": 17, "reset_st": 17, "resourc": 9, "resourcevari": 17, "resourcevariables_instead_of_referencevari": 17, "restart": [16, 17, 18, 19, 20], "restor": 17, "restrict": [16, 17, 18, 19, 20], "result": [0, 7, 16, 17, 18, 19, 20], "retain": [16, 19], "retriev": 17, "return": [0, 2, 3, 5, 6, 8, 12, 14, 16, 17, 18, 19, 20], "return_dict": 17, "reus": 17, "revers": 17, "risk": [0, 6, 10, 17, 18], "risk_appetite_config": 6, "riski": 6, "root": [16, 17, 19], "round": [12, 17], "rout": [16, 19], "row": [8, 12], "rst": 14, "rule": [6, 16, 17, 18, 19, 20], "run": [0, 1, 2, 6, 8, 16, 17, 18, 19, 20], "run_attack": [16, 17, 18, 19, 20], "run_attack_rep": 8, "run_eagerli": 17, "runner": 12, "runtimeerror": 17, "s010351": 9, "sacro": [3, 12, 14], "sacroml": [0, 2, 3, 5, 6, 7, 8, 12, 16, 17, 18, 19, 20], "safe": [14, 16, 17, 18, 19, 20], "safedecisiontre": [9, 14, 15], "safedecisiontreeclassifi": 16, "safegradientboost": 14, "safekera": [14, 17], "safekerasclassif": [16, 18, 19, 20], "safekerasmodel": [9, 15], "safemodel": [7, 9, 13, 16, 17, 18, 19, 20], "safemodeltomakesaf": 14, "saferandomforest": [9, 14, 15], "saferandomforestclassifi": [18, 19], "saferfmodel": 18, "safesvc": [9, 15], "same": [14, 16, 17, 18, 19], "same_config": 17, "same_weight": [14, 17], "sampl": [3, 8, 16, 17, 19], "sample_weight": [16, 17, 19], "sav": [7, 16, 17, 18, 19, 20], "save": [7, 10, 16, 17, 18, 19, 20], "save_format": 17, "save_model": 17, "save_own_vari": 17, "save_spec": 17, "save_weight": 17, "saved_model": [14, 17, 18], "saved_separ": [16, 17, 18, 19, 20], "saved_v": [16, 17, 18, 19, 20], "savedmodel": 17, "scalar": 17, "scale": 20, "scenario": [2, 5], "scope": 17, "score": [0, 3, 16, 19], "sdc": 3, "search": [6, 9, 16], "section": 17, "secur": 17, "see": [3, 16, 17, 19], "self": [12, 14, 16, 17, 18, 19, 20], "semi": 9, "sensibl": [5, 12], "sent": 20, "separ": [5, 17, 18], "sequenc": 17, "sequence_length": 17, "sequenti": 17, "serial": [5, 17], "serializ": 17, "serv": 17, "serving_default": 17, "set": [6, 8, 12, 16, 17, 18, 19, 20], "set_config": [16, 19], "set_fit_request": [16, 19], "set_param": [16, 19, 20], "set_score_request": [16, 19], "set_weight": 17, "settabl": 17, "sever": 16, "sgd": 17, "shadow": 2, "shape": [3, 14, 16, 17, 19], "share": 17, "should": [5, 14, 16, 17, 19], "show": [0, 1, 17], "show_train": 17, "shown": 17, "shuffl": 17, "signatur": 17, "signific": [2, 4, 8], "silent": 17, "similar": [4, 6], "simpl": [16, 19], "simpli": 5, "sinc": [3, 16, 17, 18, 19, 20], "singl": [4, 5, 12, 16, 17, 19, 20], "size": [14, 17, 19], "skip": [5, 17], "skip_mismatch": 17, "skipkei": 5, "sklearn": [7, 8, 12, 14, 16, 19, 20], "slower": [17, 19], "small": [12, 17], "smallest": 16, "so": [14, 16, 17, 19], "some": [3, 14, 16, 17, 19], "sort": [5, 8, 17], "sort_kei": 5, "sort_prob": 8, "sourc": [0, 2, 3, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20], "space": 20, "spars": [16, 17, 19], "specif": [4, 5, 9, 14, 16, 17, 18, 19, 20], "specifi": [5, 6, 16, 17, 18, 19, 20], "spin": 17, "split": [7, 8, 16, 17, 18, 19, 20], "splitter": 6, "sqrt": 6, "squared_differ": 17, "stabil": 17, "stabl": 17, "standalon": 17, "standard": [2, 3, 4, 5, 6, 12], "standardis": [4, 12], "start": 17, "state": 17, "state_upd": 17, "statefulli": 17, "static": [6, 17], "stdout": 17, "step": [14, 17], "steps_per_epoch": 17, "steps_per_execut": 17, "still": 17, "storag": 7, "store": [0, 2, 4, 7, 8, 12, 14, 16, 17, 18, 19, 20], "str": [0, 2, 5, 6, 7, 8, 12, 14, 16, 17, 18, 19, 20], "strategi": 17, "string": [0, 5, 16, 17, 18, 19, 20], "structur": [1, 5, 9, 16, 17], "structural_attack": 6, "structuralattack": 6, "studi": 6, "sub": [16, 17, 19], "subclass": 17, "subclassmodel": 17, "subject": 6, "submodul": 17, "subset": [8, 16, 19], "substitut": 17, "subtitl": 5, "subtre": 16, "success": 3, "suffici": 17, "suffix": 17, "suit": 14, "sum": [16, 19], "summari": 17, "super": [14, 17, 18], "suppli": 17, "support": [6, 9, 17, 20], "supports_mask": 17, "sure": [17, 18], "svc": 20, "svm": 20, "symbol": 17, "synchron": 17, "synth": 12, "t": [5, 12, 16, 17, 19], "tabl": [6, 17], "take": [5, 17], "taken": [14, 17], "target": [0, 1, 2, 4, 6, 8, 9, 12, 16, 17, 18, 19, 20], "target_model": 4, "target_model_param": 4, "task": 6, "tb": 12, "tell": [3, 17], "tempor": 17, "tensor": 17, "tensorflow": [3, 16, 17, 18, 19, 20], "tensorshap": 17, "tensorspec": 17, "termin": 17, "test": [2, 3, 4, 5, 7, 8, 14, 16, 17, 19], "test_beta": 8, "test_correct": 8, "test_featur": 20, "test_on_batch": 17, "test_prop": 8, "test_step": 17, "text": 5, "tf": 17, "tf1_vs_tf2": 17, "th": 19, "than": [10, 17, 18, 19], "the_kwd": 14, "thei": [12, 14, 16, 17], "them": 17, "themselv": 17, "thereof": 17, "thetre": 16, "thi": [0, 2, 3, 4, 5, 6, 8, 9, 13, 14, 16, 17, 18, 19, 20], "thing": [2, 8], "third": 17, "those": [16, 17, 18, 19, 20], "thread": 17, "three": [4, 17], "threshold": [2, 8, 16], "through": [10, 16, 19], "throw": 17, "thu": [16, 17, 18, 19, 20], "time": [4, 17], "timestamp": [14, 18, 19, 20], "timestep": 17, "titl": 5, "tnr": 3, "to_json": 17, "to_yaml": 17, "top": [6, 17], "topolog": 17, "topologi": 17, "total": [16, 17, 19], "tpr": [3, 4], "trace": 17, "track": 17, "train": [0, 2, 6, 7, 8, 16, 17, 18, 19, 20], "train_beta": 8, "train_correct": 8, "train_featur": 20, "train_label": 20, "train_on_batch": 17, "train_step": 17, "trainabl": 17, "trainable_vari": 17, "trainable_weight": 17, "transfer": 17, "transform": [3, 17], "travers": 17, "tre": [6, 10, 16, 17, 18, 19, 20], "treat": 17, "tree": [6, 13, 14, 16, 19], "tree1": 16, "tree1_tre": 16, "tree2": 16, "tree2_tre": 16, "tree_": 16, "true": [0, 2, 3, 4, 5, 6, 8, 14, 16, 17, 18, 19, 20], "trust": [9, 10], "try": 17, "tune": 17, "tupl": [3, 5, 6, 8, 12, 14, 16, 17, 18, 19, 20], "two": [16, 17, 18], "type": [3, 4, 6, 14, 16, 17, 18], "typeerror": [5, 17], "typic": 17, "uk": 9, "unambigu": 17, "unchang": [16, 19], "undefin": [16, 17, 18, 19, 20], "under": [4, 9, 17], "underli": 17, "unexpect": 17, "uniform": 17, "uniqu": [4, 16, 17, 19], "unit": 12, "unknowndataset": 12, "unless": [16, 17, 19], "unlik": 17, "unnecessarili": 6, "unpack": 17, "unprocess": 7, "unrel": 17, "unsaf": [10, 17], "unspecifi": 17, "unsupport": 17, "until": 17, "unus": 17, "unusu": 17, "up": [16, 17, 19], "updat": [16, 17, 19], "update_st": 17, "upheld": [16, 17, 18, 19, 20], "upon": [8, 17], "upstream": 17, "us": [0, 2, 3, 5, 6, 8, 10, 13, 14, 16, 17, 18, 19], "use_multiprocess": 17, "use_resourc": 17, "user": [10, 12, 16, 17, 18, 19], "usual": 3, "util": [16, 17, 19], "v": 12, "v1": 17, "v2": 17, "v3": 17, "val": [14, 18], "valid": [14, 17], "validation_data": 17, "validation_freq": 17, "validation_step": 17, "valu": [0, 2, 3, 4, 6, 8, 10, 12, 16, 17, 18, 19, 20], "valueerror": [5, 17], "variabl": [3, 4, 7, 8, 12, 17], "variable_dtyp": 17, "variableaggreg": 17, "variableaggregationv2": 17, "variablesynchron": 17, "varianc": [12, 17], "variant": 17, "vector": [17, 20], "verbos": [14, 16, 17, 18, 19, 20], "versa": 17, "version": [5, 14, 16, 17, 18, 19, 20], "via": [12, 16, 17, 18, 19, 20], "vice": 17, "view": 17, "violat": [16, 17, 18, 19, 20], "vote": 19, "w": [16, 17, 19], "wa": [4, 6, 9, 16, 17, 18, 19, 20], "wai": 17, "want": 17, "warm_start": 14, "warn": [10, 16, 17, 18, 19], "we": [12, 17], "weight": [14, 16, 17, 19], "weight_nam": 17, "weight_path": 17, "well": [16, 17, 19], "were": [6, 9, 17], "what": [9, 16, 17], "when": [0, 4, 6, 8, 17, 18], "whenev": 17, "where": [0, 2, 4, 8, 10, 16, 17, 19], "whether": [0, 2, 3, 6, 8, 16, 17, 18, 19, 20], "which": [3, 4, 5, 6, 12, 16, 17, 19, 20], "while": [16, 17], "white": [6, 17], "whitespac": 5, "who": 17, "whose": 17, "window": 17, "wish": 17, "with_name_scop": 17, "with_traceback": 12, "within": [16, 17, 18], "without": 17, "work": [9, 12, 16, 17, 19], "worker": 17, "workflow": 17, "worst": [1, 5, 9, 16, 17, 18, 19, 20], "worst_case_attack": 8, "worstcaseattack": 8, "would": [5, 6, 16, 17], "wrap": 17, "wrapper": [10, 14, 17, 18], "write": [0, 5, 6, 16, 17, 18, 19, 20], "write_json": 5, "write_pdf": 5, "write_report": [0, 2, 6, 8], "written": 14, "www": 17, "x": [3, 8, 12, 14, 16, 17, 18, 19, 20], "x_leav": [16, 19], "x_orig": 7, "x_prop": 3, "x_test": 7, "x_test_orig": 7, "x_train": 7, "x_train_orig": 7, "xgboost": 14, "xla": 17, "xprop": 3, "y": [3, 12, 14, 16, 17, 18, 19, 20], "y_orig": 7, "y_pred": 17, "y_pred_proba": 3, "y_test": [3, 7], "y_test_orig": 7, "y_train": 7, "y_train_orig": 7, "y_true": 3, "yaml": [6, 7, 17], "yaml_str": 17, "yet": 17, "yield": [5, 17], "you": [5, 14, 16, 17, 19], "your": 17, "yp": 3, "zero": [12, 16, 17, 19]}, "titles": ["Attribute Attack", "Attacks", "LiRA Attack", "Metrics", "JSON Output for Attacks", "Report", "Structural Attack", "Target", "Worst Case Attack", "Welcome to the SACRO-ML documentation!", "Introduction", "Preprocessing", "Loaders", "Examples", "Extending SafeModel", "Safemodel", "SafeDecisionTree", "SafeKerasModel", "Base Class", "SafeRandomForest", "SafeSVC"], "titleterms": {"The": 14, "__init__": 14, "add": 14, "ani": 14, "attack": [0, 1, 2, 4, 6, 8], "attribut": 0, "base": 18, "case": [4, 8], "check": 14, "class": [14, 18], "confirm": 14, "content": 9, "copi": 14, "core": 14, "data": 14, "defin": 14, "design": 14, "document": [9, 14], "examine_separ": 14, "exampl": 13, "extend": 14, "file": 14, "fit": 14, "full": 13, "function": 14, "fund": 9, "gener": 4, "helper": 14, "i": 10, "ignore_item": 14, "includ": 14, "indic": 9, "introduct": 10, "item": 14, "json": [4, 14], "length": 13, "lira": [2, 4], "loader": 12, "method": 14, "metric": 3, "ml": 9, "modular": 14, "notebook": 13, "option": 14, "output": 4, "overrid": 14, "paramnam": 14, "preprocess": 11, "pytest": 14, "quick": 13, "report": 5, "rule": 14, "sacro": 9, "safedecisiontre": [13, 16], "safekera": 13, "safekerasmodel": 17, "safemodel": [10, 14, 15], "safer": 14, "saferandomforest": [13, 19], "safesvc": [13, 20], "sphinx": 14, "start": 13, "statement": 9, "structur": [4, 6, 14], "tabl": 9, "target": 7, "templat": 14, "tutori": 13, "unusu": 14, "updat": 14, "welcom": 9, "what": 10, "worst": [4, 8], "write": 14}})